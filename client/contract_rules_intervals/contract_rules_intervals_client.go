// Code generated by go-swagger; DO NOT EDIT.

package contract_rules_intervals

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new contract rules intervals API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for contract rules intervals API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ContractrulesByRuleIDIntervalsByIntervalIDDelete deletes a contract rule interval
*/
func (a *Client) ContractrulesByRuleIDIntervalsByIntervalIDDelete(params *ContractrulesByRuleIDIntervalsByIntervalIDDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ContractrulesByRuleIDIntervalsByIntervalIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractrulesByRuleIDIntervalsByIntervalIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContractrulesByRuleIdIntervalsByIntervalIdDelete",
		Method:             "DELETE",
		PathPattern:        "/contractrules/{ruleId}/intervals/{intervalId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ContractrulesByRuleIDIntervalsByIntervalIDDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContractrulesByRuleIDIntervalsByIntervalIDDeleteOK), nil

}

/*
ContractrulesByRuleIDIntervalsByIntervalIDPut updates a contract rule interval
*/
func (a *Client) ContractrulesByRuleIDIntervalsByIntervalIDPut(params *ContractrulesByRuleIDIntervalsByIntervalIDPutParams, authInfo runtime.ClientAuthInfoWriter) (*ContractrulesByRuleIDIntervalsByIntervalIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractrulesByRuleIDIntervalsByIntervalIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContractrulesByRuleIdIntervalsByIntervalIdPut",
		Method:             "PUT",
		PathPattern:        "/contractrules/{ruleId}/intervals/{intervalId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ContractrulesByRuleIDIntervalsByIntervalIDPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContractrulesByRuleIDIntervalsByIntervalIDPutOK), nil

}

/*
ContractrulesByRuleIDIntervalsByIntervalIDReactivatePut reactivates a previously deleted contract rule interval
*/
func (a *Client) ContractrulesByRuleIDIntervalsByIntervalIDReactivatePut(params *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams, authInfo runtime.ClientAuthInfoWriter) (*ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContractrulesByRuleIdIntervalsByIntervalIdReactivatePut",
		Method:             "PUT",
		PathPattern:        "/contractrules/{ruleId}/intervals/{intervalId}/reactivate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutOK), nil

}

/*
ContractrulesByRuleIDIntervalsGet gets the list of intervals by rule ID months collection should be null or fully initialized n o t empty array
*/
func (a *Client) ContractrulesByRuleIDIntervalsGet(params *ContractrulesByRuleIDIntervalsGetParams, authInfo runtime.ClientAuthInfoWriter) (*ContractrulesByRuleIDIntervalsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractrulesByRuleIDIntervalsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContractrulesByRuleIdIntervalsGet",
		Method:             "GET",
		PathPattern:        "/contractrules/{ruleId}/intervals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ContractrulesByRuleIDIntervalsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContractrulesByRuleIDIntervalsGetOK), nil

}

/*
ContractrulesByRuleIDIntervalsPost creates a contract rule interval
*/
func (a *Client) ContractrulesByRuleIDIntervalsPost(params *ContractrulesByRuleIDIntervalsPostParams, authInfo runtime.ClientAuthInfoWriter) (*ContractrulesByRuleIDIntervalsPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractrulesByRuleIDIntervalsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContractrulesByRuleIdIntervalsPost",
		Method:             "POST",
		PathPattern:        "/contractrules/{ruleId}/intervals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ContractrulesByRuleIDIntervalsPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContractrulesByRuleIDIntervalsPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
