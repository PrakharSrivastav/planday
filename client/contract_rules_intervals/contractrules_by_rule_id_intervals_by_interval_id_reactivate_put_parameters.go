// Code generated by go-swagger; DO NOT EDIT.

package contract_rules_intervals

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/PrakharSrivastav/planday/models"
)

// NewContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams creates a new ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams object
// with the default values initialized.
func NewContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams() *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams {
	var ()
	return &ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParamsWithTimeout creates a new ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParamsWithTimeout(timeout time.Duration) *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams {
	var ()
	return &ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams{

		timeout: timeout,
	}
}

// NewContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParamsWithContext creates a new ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams object
// with the default values initialized, and the ability to set a context for a request
func NewContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParamsWithContext(ctx context.Context) *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams {
	var ()
	return &ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams{

		Context: ctx,
	}
}

// NewContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParamsWithHTTPClient creates a new ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParamsWithHTTPClient(client *http.Client) *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams {
	var ()
	return &ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams{
		HTTPClient: client,
	}
}

/*ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams contains all the parameters to send to the API endpoint
for the contractrules by rule Id intervals by interval Id reactivate put operation typically these are written to a http.Request
*/
type ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams struct {

	/*IntervalID*/
	IntervalID int64
	/*RuleID*/
	RuleID int64
	/*UpdateModel*/
	UpdateModel *models.ContractRulesIntervalViewModel

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the contractrules by rule Id intervals by interval Id reactivate put params
func (o *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams) WithTimeout(timeout time.Duration) *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the contractrules by rule Id intervals by interval Id reactivate put params
func (o *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the contractrules by rule Id intervals by interval Id reactivate put params
func (o *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams) WithContext(ctx context.Context) *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the contractrules by rule Id intervals by interval Id reactivate put params
func (o *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the contractrules by rule Id intervals by interval Id reactivate put params
func (o *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams) WithHTTPClient(client *http.Client) *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the contractrules by rule Id intervals by interval Id reactivate put params
func (o *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIntervalID adds the intervalID to the contractrules by rule Id intervals by interval Id reactivate put params
func (o *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams) WithIntervalID(intervalID int64) *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams {
	o.SetIntervalID(intervalID)
	return o
}

// SetIntervalID adds the intervalId to the contractrules by rule Id intervals by interval Id reactivate put params
func (o *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams) SetIntervalID(intervalID int64) {
	o.IntervalID = intervalID
}

// WithRuleID adds the ruleID to the contractrules by rule Id intervals by interval Id reactivate put params
func (o *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams) WithRuleID(ruleID int64) *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams {
	o.SetRuleID(ruleID)
	return o
}

// SetRuleID adds the ruleId to the contractrules by rule Id intervals by interval Id reactivate put params
func (o *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams) SetRuleID(ruleID int64) {
	o.RuleID = ruleID
}

// WithUpdateModel adds the updateModel to the contractrules by rule Id intervals by interval Id reactivate put params
func (o *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams) WithUpdateModel(updateModel *models.ContractRulesIntervalViewModel) *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams {
	o.SetUpdateModel(updateModel)
	return o
}

// SetUpdateModel adds the updateModel to the contractrules by rule Id intervals by interval Id reactivate put params
func (o *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams) SetUpdateModel(updateModel *models.ContractRulesIntervalViewModel) {
	o.UpdateModel = updateModel
}

// WriteToRequest writes these params to a swagger request
func (o *ContractrulesByRuleIDIntervalsByIntervalIDReactivatePutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param intervalId
	if err := r.SetPathParam("intervalId", swag.FormatInt64(o.IntervalID)); err != nil {
		return err
	}

	// path param ruleId
	if err := r.SetPathParam("ruleId", swag.FormatInt64(o.RuleID)); err != nil {
		return err
	}

	if o.UpdateModel != nil {
		if err := r.SetBodyParam(o.UpdateModel); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
