// Code generated by go-swagger; DO NOT EDIT.

package contract_rules_shift_types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewContractrulesByRuleIDShifttypesByAllSelectedPutParams creates a new ContractrulesByRuleIDShifttypesByAllSelectedPutParams object
// with the default values initialized.
func NewContractrulesByRuleIDShifttypesByAllSelectedPutParams() *ContractrulesByRuleIDShifttypesByAllSelectedPutParams {
	var ()
	return &ContractrulesByRuleIDShifttypesByAllSelectedPutParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewContractrulesByRuleIDShifttypesByAllSelectedPutParamsWithTimeout creates a new ContractrulesByRuleIDShifttypesByAllSelectedPutParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewContractrulesByRuleIDShifttypesByAllSelectedPutParamsWithTimeout(timeout time.Duration) *ContractrulesByRuleIDShifttypesByAllSelectedPutParams {
	var ()
	return &ContractrulesByRuleIDShifttypesByAllSelectedPutParams{

		timeout: timeout,
	}
}

// NewContractrulesByRuleIDShifttypesByAllSelectedPutParamsWithContext creates a new ContractrulesByRuleIDShifttypesByAllSelectedPutParams object
// with the default values initialized, and the ability to set a context for a request
func NewContractrulesByRuleIDShifttypesByAllSelectedPutParamsWithContext(ctx context.Context) *ContractrulesByRuleIDShifttypesByAllSelectedPutParams {
	var ()
	return &ContractrulesByRuleIDShifttypesByAllSelectedPutParams{

		Context: ctx,
	}
}

// NewContractrulesByRuleIDShifttypesByAllSelectedPutParamsWithHTTPClient creates a new ContractrulesByRuleIDShifttypesByAllSelectedPutParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewContractrulesByRuleIDShifttypesByAllSelectedPutParamsWithHTTPClient(client *http.Client) *ContractrulesByRuleIDShifttypesByAllSelectedPutParams {
	var ()
	return &ContractrulesByRuleIDShifttypesByAllSelectedPutParams{
		HTTPClient: client,
	}
}

/*ContractrulesByRuleIDShifttypesByAllSelectedPutParams contains all the parameters to send to the API endpoint
for the contractrules by rule Id shifttypes by all selected put operation typically these are written to a http.Request
*/
type ContractrulesByRuleIDShifttypesByAllSelectedPutParams struct {

	/*AllSelected*/
	AllSelected bool
	/*RuleID*/
	RuleID int64
	/*UpdateModel*/
	UpdateModel []int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the contractrules by rule Id shifttypes by all selected put params
func (o *ContractrulesByRuleIDShifttypesByAllSelectedPutParams) WithTimeout(timeout time.Duration) *ContractrulesByRuleIDShifttypesByAllSelectedPutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the contractrules by rule Id shifttypes by all selected put params
func (o *ContractrulesByRuleIDShifttypesByAllSelectedPutParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the contractrules by rule Id shifttypes by all selected put params
func (o *ContractrulesByRuleIDShifttypesByAllSelectedPutParams) WithContext(ctx context.Context) *ContractrulesByRuleIDShifttypesByAllSelectedPutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the contractrules by rule Id shifttypes by all selected put params
func (o *ContractrulesByRuleIDShifttypesByAllSelectedPutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the contractrules by rule Id shifttypes by all selected put params
func (o *ContractrulesByRuleIDShifttypesByAllSelectedPutParams) WithHTTPClient(client *http.Client) *ContractrulesByRuleIDShifttypesByAllSelectedPutParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the contractrules by rule Id shifttypes by all selected put params
func (o *ContractrulesByRuleIDShifttypesByAllSelectedPutParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllSelected adds the allSelected to the contractrules by rule Id shifttypes by all selected put params
func (o *ContractrulesByRuleIDShifttypesByAllSelectedPutParams) WithAllSelected(allSelected bool) *ContractrulesByRuleIDShifttypesByAllSelectedPutParams {
	o.SetAllSelected(allSelected)
	return o
}

// SetAllSelected adds the allSelected to the contractrules by rule Id shifttypes by all selected put params
func (o *ContractrulesByRuleIDShifttypesByAllSelectedPutParams) SetAllSelected(allSelected bool) {
	o.AllSelected = allSelected
}

// WithRuleID adds the ruleID to the contractrules by rule Id shifttypes by all selected put params
func (o *ContractrulesByRuleIDShifttypesByAllSelectedPutParams) WithRuleID(ruleID int64) *ContractrulesByRuleIDShifttypesByAllSelectedPutParams {
	o.SetRuleID(ruleID)
	return o
}

// SetRuleID adds the ruleId to the contractrules by rule Id shifttypes by all selected put params
func (o *ContractrulesByRuleIDShifttypesByAllSelectedPutParams) SetRuleID(ruleID int64) {
	o.RuleID = ruleID
}

// WithUpdateModel adds the updateModel to the contractrules by rule Id shifttypes by all selected put params
func (o *ContractrulesByRuleIDShifttypesByAllSelectedPutParams) WithUpdateModel(updateModel []int64) *ContractrulesByRuleIDShifttypesByAllSelectedPutParams {
	o.SetUpdateModel(updateModel)
	return o
}

// SetUpdateModel adds the updateModel to the contractrules by rule Id shifttypes by all selected put params
func (o *ContractrulesByRuleIDShifttypesByAllSelectedPutParams) SetUpdateModel(updateModel []int64) {
	o.UpdateModel = updateModel
}

// WriteToRequest writes these params to a swagger request
func (o *ContractrulesByRuleIDShifttypesByAllSelectedPutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param allSelected
	if err := r.SetPathParam("allSelected", swag.FormatBool(o.AllSelected)); err != nil {
		return err
	}

	// path param ruleId
	if err := r.SetPathParam("ruleId", swag.FormatInt64(o.RuleID)); err != nil {
		return err
	}

	if o.UpdateModel != nil {
		if err := r.SetBodyParam(o.UpdateModel); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
