// Code generated by go-swagger; DO NOT EDIT.

package custom_property_attachment_values

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new custom property attachment values API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for custom property attachment values API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentDelete deletes the attachment value of a custom property
*/
func (a *Client) EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentDelete(params *EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeesByIdCustom_propertiesByCustom_property_nameAttachmentDelete",
		Method:             "DELETE",
		PathPattern:        "/employees/{id}/custom_properties/{custom_property_name}/attachment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentDeleteOK), nil

}

/*
EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentGet gets the attachment value of a custom property
*/
func (a *Client) EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentGet(params *EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeesByIdCustom_propertiesByCustom_property_nameAttachmentGet",
		Method:             "GET",
		PathPattern:        "/employees/{id}/custom_properties/{custom_property_name}/attachment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentGetOK), nil

}

/*
EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentPost creates an attachment value for a custom property
*/
func (a *Client) EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentPost(params *EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentPostParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeesByIdCustom_propertiesByCustom_property_nameAttachmentPost",
		Method:             "POST",
		PathPattern:        "/employees/{id}/custom_properties/{custom_property_name}/attachment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentPostOK), nil

}

/*
EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentPut updates the attachment value for a custom property
*/
func (a *Client) EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentPut(params *EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentPutParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeesByIdCustom_propertiesByCustom_property_nameAttachmentPut",
		Method:             "PUT",
		PathPattern:        "/employees/{id}/custom_properties/{custom_property_name}/attachment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeesByIDCustomPropertiesByCustomPropertyNameAttachmentPutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
