// Code generated by go-swagger; DO NOT EDIT.

package departments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new departments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for departments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DepartmentsByIDDelete deletes a department with a given id and if set remove the department from the users who currently is in the department
*/
func (a *Client) DepartmentsByIDDelete(params *DepartmentsByIDDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDepartmentsByIDDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DepartmentsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/departments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DepartmentsByIDDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DepartmentsByIDGet returns a department with a given id
*/
func (a *Client) DepartmentsByIDGet(params *DepartmentsByIDGetParams, authInfo runtime.ClientAuthInfoWriter) (*DepartmentsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDepartmentsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DepartmentsByIdGet",
		Method:             "GET",
		PathPattern:        "/departments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DepartmentsByIDGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DepartmentsByIDGetOK), nil

}

/*
DepartmentsByIDPut updates a department with a given id
*/
func (a *Client) DepartmentsByIDPut(params *DepartmentsByIDPutParams, authInfo runtime.ClientAuthInfoWriter) (*DepartmentsByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDepartmentsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DepartmentsByIdPut",
		Method:             "PUT",
		PathPattern:        "/departments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DepartmentsByIDPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DepartmentsByIDPutOK), nil

}

/*
DepartmentsGet returns the filtered and sorted list of departments in a portal
*/
func (a *Client) DepartmentsGet(params *DepartmentsGetParams, authInfo runtime.ClientAuthInfoWriter) (*DepartmentsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDepartmentsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DepartmentsGet",
		Method:             "GET",
		PathPattern:        "/departments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DepartmentsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DepartmentsGetOK), nil

}

/*
DepartmentsPost creates a new department
*/
func (a *Client) DepartmentsPost(params *DepartmentsPostParams, authInfo runtime.ClientAuthInfoWriter) (*DepartmentsPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDepartmentsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DepartmentsPost",
		Method:             "POST",
		PathPattern:        "/departments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DepartmentsPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DepartmentsPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
