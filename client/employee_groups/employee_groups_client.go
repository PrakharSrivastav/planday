// Code generated by go-swagger; DO NOT EDIT.

package employee_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new employee groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for employee groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
EmployeeGroupsByIDDelete deletes an employee group
*/
func (a *Client) EmployeeGroupsByIDDelete(params *EmployeeGroupsByIDDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeGroupsByIDDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Employee_groupsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/employee_groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeeGroupsByIDDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
EmployeeGroupsByIDGet gets a single employee group by its id
*/
func (a *Client) EmployeeGroupsByIDGet(params *EmployeeGroupsByIDGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeGroupsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeGroupsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Employee_groupsByIdGet",
		Method:             "GET",
		PathPattern:        "/employee_groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeeGroupsByIDGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeeGroupsByIDGetOK), nil

}

/*
EmployeeGroupsByIDPut updates an employee group
*/
func (a *Client) EmployeeGroupsByIDPut(params *EmployeeGroupsByIDPutParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeGroupsByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeGroupsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Employee_groupsByIdPut",
		Method:             "PUT",
		PathPattern:        "/employee_groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeeGroupsByIDPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeeGroupsByIDPutOK), nil

}

/*
EmployeeGroupsGet returns a list of employee groups in a portal defined by user token or in the specified department
*/
func (a *Client) EmployeeGroupsGet(params *EmployeeGroupsGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeGroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeGroupsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Employee_groupsGet",
		Method:             "GET",
		PathPattern:        "/employee_groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeeGroupsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeeGroupsGetOK), nil

}

/*
EmployeeGroupsPost creates a new employee group
*/
func (a *Client) EmployeeGroupsPost(params *EmployeeGroupsPostParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeGroupsPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeGroupsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Employee_groupsPost",
		Method:             "POST",
		PathPattern:        "/employee_groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeeGroupsPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeeGroupsPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
