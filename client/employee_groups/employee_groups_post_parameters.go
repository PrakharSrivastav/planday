// Code generated by go-swagger; DO NOT EDIT.

package employee_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/PrakharSrivastav/planday/models"
)

// NewEmployeeGroupsPostParams creates a new EmployeeGroupsPostParams object
// with the default values initialized.
func NewEmployeeGroupsPostParams() *EmployeeGroupsPostParams {
	var ()
	return &EmployeeGroupsPostParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewEmployeeGroupsPostParamsWithTimeout creates a new EmployeeGroupsPostParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEmployeeGroupsPostParamsWithTimeout(timeout time.Duration) *EmployeeGroupsPostParams {
	var ()
	return &EmployeeGroupsPostParams{

		timeout: timeout,
	}
}

// NewEmployeeGroupsPostParamsWithContext creates a new EmployeeGroupsPostParams object
// with the default values initialized, and the ability to set a context for a request
func NewEmployeeGroupsPostParamsWithContext(ctx context.Context) *EmployeeGroupsPostParams {
	var ()
	return &EmployeeGroupsPostParams{

		Context: ctx,
	}
}

// NewEmployeeGroupsPostParamsWithHTTPClient creates a new EmployeeGroupsPostParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEmployeeGroupsPostParamsWithHTTPClient(client *http.Client) *EmployeeGroupsPostParams {
	var ()
	return &EmployeeGroupsPostParams{
		HTTPClient: client,
	}
}

/*EmployeeGroupsPostParams contains all the parameters to send to the API endpoint
for the employee groups post operation typically these are written to a http.Request
*/
type EmployeeGroupsPostParams struct {

	/*EmployeeGroupInputModel*/
	EmployeeGroupInputModel *models.EmployeeGroupInputModelExtended

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the employee groups post params
func (o *EmployeeGroupsPostParams) WithTimeout(timeout time.Duration) *EmployeeGroupsPostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the employee groups post params
func (o *EmployeeGroupsPostParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the employee groups post params
func (o *EmployeeGroupsPostParams) WithContext(ctx context.Context) *EmployeeGroupsPostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the employee groups post params
func (o *EmployeeGroupsPostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the employee groups post params
func (o *EmployeeGroupsPostParams) WithHTTPClient(client *http.Client) *EmployeeGroupsPostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the employee groups post params
func (o *EmployeeGroupsPostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmployeeGroupInputModel adds the employeeGroupInputModel to the employee groups post params
func (o *EmployeeGroupsPostParams) WithEmployeeGroupInputModel(employeeGroupInputModel *models.EmployeeGroupInputModelExtended) *EmployeeGroupsPostParams {
	o.SetEmployeeGroupInputModel(employeeGroupInputModel)
	return o
}

// SetEmployeeGroupInputModel adds the employeeGroupInputModel to the employee groups post params
func (o *EmployeeGroupsPostParams) SetEmployeeGroupInputModel(employeeGroupInputModel *models.EmployeeGroupInputModelExtended) {
	o.EmployeeGroupInputModel = employeeGroupInputModel
}

// WriteToRequest writes these params to a swagger request
func (o *EmployeeGroupsPostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EmployeeGroupInputModel != nil {
		if err := r.SetBodyParam(o.EmployeeGroupInputModel); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
