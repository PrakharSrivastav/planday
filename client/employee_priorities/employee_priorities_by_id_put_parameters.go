// Code generated by go-swagger; DO NOT EDIT.

package employee_priorities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewEmployeePrioritiesByIDPutParams creates a new EmployeePrioritiesByIDPutParams object
// with the default values initialized.
func NewEmployeePrioritiesByIDPutParams() *EmployeePrioritiesByIDPutParams {
	var ()
	return &EmployeePrioritiesByIDPutParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewEmployeePrioritiesByIDPutParamsWithTimeout creates a new EmployeePrioritiesByIDPutParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEmployeePrioritiesByIDPutParamsWithTimeout(timeout time.Duration) *EmployeePrioritiesByIDPutParams {
	var ()
	return &EmployeePrioritiesByIDPutParams{

		timeout: timeout,
	}
}

// NewEmployeePrioritiesByIDPutParamsWithContext creates a new EmployeePrioritiesByIDPutParams object
// with the default values initialized, and the ability to set a context for a request
func NewEmployeePrioritiesByIDPutParamsWithContext(ctx context.Context) *EmployeePrioritiesByIDPutParams {
	var ()
	return &EmployeePrioritiesByIDPutParams{

		Context: ctx,
	}
}

// NewEmployeePrioritiesByIDPutParamsWithHTTPClient creates a new EmployeePrioritiesByIDPutParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEmployeePrioritiesByIDPutParamsWithHTTPClient(client *http.Client) *EmployeePrioritiesByIDPutParams {
	var ()
	return &EmployeePrioritiesByIDPutParams{
		HTTPClient: client,
	}
}

/*EmployeePrioritiesByIDPutParams contains all the parameters to send to the API endpoint
for the employee priorities by Id put operation typically these are written to a http.Request
*/
type EmployeePrioritiesByIDPutParams struct {

	/*EmployeeGroupID*/
	EmployeeGroupID *int64
	/*EmployeeID*/
	EmployeeID *int64
	/*EndDate*/
	EndDate *string
	/*ID*/
	ID *int64
	/*PortalID*/
	PortalID *int64
	/*StartDate*/
	StartDate *string
	/*Value*/
	Value *int32
	/*ID*/
	ID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the employee priorities by Id put params
func (o *EmployeePrioritiesByIDPutParams) WithTimeout(timeout time.Duration) *EmployeePrioritiesByIDPutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the employee priorities by Id put params
func (o *EmployeePrioritiesByIDPutParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the employee priorities by Id put params
func (o *EmployeePrioritiesByIDPutParams) WithContext(ctx context.Context) *EmployeePrioritiesByIDPutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the employee priorities by Id put params
func (o *EmployeePrioritiesByIDPutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the employee priorities by Id put params
func (o *EmployeePrioritiesByIDPutParams) WithHTTPClient(client *http.Client) *EmployeePrioritiesByIDPutParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the employee priorities by Id put params
func (o *EmployeePrioritiesByIDPutParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmployeeGroupID adds the employeeGroupID to the employee priorities by Id put params
func (o *EmployeePrioritiesByIDPutParams) WithEmployeeGroupID(employeeGroupID *int64) *EmployeePrioritiesByIDPutParams {
	o.SetEmployeeGroupID(employeeGroupID)
	return o
}

// SetEmployeeGroupID adds the employeeGroupId to the employee priorities by Id put params
func (o *EmployeePrioritiesByIDPutParams) SetEmployeeGroupID(employeeGroupID *int64) {
	o.EmployeeGroupID = employeeGroupID
}

// WithEmployeeID adds the employeeID to the employee priorities by Id put params
func (o *EmployeePrioritiesByIDPutParams) WithEmployeeID(employeeID *int64) *EmployeePrioritiesByIDPutParams {
	o.SetEmployeeID(employeeID)
	return o
}

// SetEmployeeID adds the employeeId to the employee priorities by Id put params
func (o *EmployeePrioritiesByIDPutParams) SetEmployeeID(employeeID *int64) {
	o.EmployeeID = employeeID
}

// WithEndDate adds the endDate to the employee priorities by Id put params
func (o *EmployeePrioritiesByIDPutParams) WithEndDate(endDate *string) *EmployeePrioritiesByIDPutParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the employee priorities by Id put params
func (o *EmployeePrioritiesByIDPutParams) SetEndDate(endDate *string) {
	o.EndDate = endDate
}

// WithID adds the id to the employee priorities by Id put params
func (o *EmployeePrioritiesByIDPutParams) WithID(id *int64) *EmployeePrioritiesByIDPutParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the employee priorities by Id put params
func (o *EmployeePrioritiesByIDPutParams) SetID(id *int64) {
	o.ID = id
}

// WithPortalID adds the portalID to the employee priorities by Id put params
func (o *EmployeePrioritiesByIDPutParams) WithPortalID(portalID *int64) *EmployeePrioritiesByIDPutParams {
	o.SetPortalID(portalID)
	return o
}

// SetPortalID adds the portalId to the employee priorities by Id put params
func (o *EmployeePrioritiesByIDPutParams) SetPortalID(portalID *int64) {
	o.PortalID = portalID
}

// WithStartDate adds the startDate to the employee priorities by Id put params
func (o *EmployeePrioritiesByIDPutParams) WithStartDate(startDate *string) *EmployeePrioritiesByIDPutParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the employee priorities by Id put params
func (o *EmployeePrioritiesByIDPutParams) SetStartDate(startDate *string) {
	o.StartDate = startDate
}

// WithValue adds the value to the employee priorities by Id put params
func (o *EmployeePrioritiesByIDPutParams) WithValue(value *int32) *EmployeePrioritiesByIDPutParams {
	o.SetValue(value)
	return o
}

// SetValue adds the value to the employee priorities by Id put params
func (o *EmployeePrioritiesByIDPutParams) SetValue(value *int32) {
	o.Value = value
}

// WithID adds the id to the employee priorities by Id put params
func (o *EmployeePrioritiesByIDPutParams) WithID(id int64) *EmployeePrioritiesByIDPutParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the employee priorities by Id put params
func (o *EmployeePrioritiesByIDPutParams) SetID(id int64) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *EmployeePrioritiesByIDPutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EmployeeGroupID != nil {

		// query param EmployeeGroupId
		var qrEmployeeGroupID int64
		if o.EmployeeGroupID != nil {
			qrEmployeeGroupID = *o.EmployeeGroupID
		}
		qEmployeeGroupID := swag.FormatInt64(qrEmployeeGroupID)
		if qEmployeeGroupID != "" {
			if err := r.SetQueryParam("EmployeeGroupId", qEmployeeGroupID); err != nil {
				return err
			}
		}

	}

	if o.EmployeeID != nil {

		// query param EmployeeId
		var qrEmployeeID int64
		if o.EmployeeID != nil {
			qrEmployeeID = *o.EmployeeID
		}
		qEmployeeID := swag.FormatInt64(qrEmployeeID)
		if qEmployeeID != "" {
			if err := r.SetQueryParam("EmployeeId", qEmployeeID); err != nil {
				return err
			}
		}

	}

	if o.EndDate != nil {

		// query param EndDate
		var qrEndDate string
		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate
		if qEndDate != "" {
			if err := r.SetQueryParam("EndDate", qEndDate); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param Id
		var qrID int64
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {
			if err := r.SetQueryParam("Id", qID); err != nil {
				return err
			}
		}

	}

	if o.PortalID != nil {

		// query param PortalId
		var qrPortalID int64
		if o.PortalID != nil {
			qrPortalID = *o.PortalID
		}
		qPortalID := swag.FormatInt64(qrPortalID)
		if qPortalID != "" {
			if err := r.SetQueryParam("PortalId", qPortalID); err != nil {
				return err
			}
		}

	}

	if o.StartDate != nil {

		// query param StartDate
		var qrStartDate string
		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate
		if qStartDate != "" {
			if err := r.SetQueryParam("StartDate", qStartDate); err != nil {
				return err
			}
		}

	}

	if o.Value != nil {

		// query param Value
		var qrValue int32
		if o.Value != nil {
			qrValue = *o.Value
		}
		qValue := swag.FormatInt32(qrValue)
		if qValue != "" {
			if err := r.SetQueryParam("Value", qValue); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
