// Code generated by go-swagger; DO NOT EDIT.

package employee_priorities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewEmployeePrioritiesPostParams creates a new EmployeePrioritiesPostParams object
// with the default values initialized.
func NewEmployeePrioritiesPostParams() *EmployeePrioritiesPostParams {
	var ()
	return &EmployeePrioritiesPostParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewEmployeePrioritiesPostParamsWithTimeout creates a new EmployeePrioritiesPostParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEmployeePrioritiesPostParamsWithTimeout(timeout time.Duration) *EmployeePrioritiesPostParams {
	var ()
	return &EmployeePrioritiesPostParams{

		timeout: timeout,
	}
}

// NewEmployeePrioritiesPostParamsWithContext creates a new EmployeePrioritiesPostParams object
// with the default values initialized, and the ability to set a context for a request
func NewEmployeePrioritiesPostParamsWithContext(ctx context.Context) *EmployeePrioritiesPostParams {
	var ()
	return &EmployeePrioritiesPostParams{

		Context: ctx,
	}
}

// NewEmployeePrioritiesPostParamsWithHTTPClient creates a new EmployeePrioritiesPostParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEmployeePrioritiesPostParamsWithHTTPClient(client *http.Client) *EmployeePrioritiesPostParams {
	var ()
	return &EmployeePrioritiesPostParams{
		HTTPClient: client,
	}
}

/*EmployeePrioritiesPostParams contains all the parameters to send to the API endpoint
for the employee priorities post operation typically these are written to a http.Request
*/
type EmployeePrioritiesPostParams struct {

	/*EmployeeGroupID*/
	EmployeeGroupID *int64
	/*EmployeeID*/
	EmployeeID *int64
	/*EndDate*/
	EndDate *string
	/*StartDate*/
	StartDate *string
	/*Value*/
	Value *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the employee priorities post params
func (o *EmployeePrioritiesPostParams) WithTimeout(timeout time.Duration) *EmployeePrioritiesPostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the employee priorities post params
func (o *EmployeePrioritiesPostParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the employee priorities post params
func (o *EmployeePrioritiesPostParams) WithContext(ctx context.Context) *EmployeePrioritiesPostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the employee priorities post params
func (o *EmployeePrioritiesPostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the employee priorities post params
func (o *EmployeePrioritiesPostParams) WithHTTPClient(client *http.Client) *EmployeePrioritiesPostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the employee priorities post params
func (o *EmployeePrioritiesPostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmployeeGroupID adds the employeeGroupID to the employee priorities post params
func (o *EmployeePrioritiesPostParams) WithEmployeeGroupID(employeeGroupID *int64) *EmployeePrioritiesPostParams {
	o.SetEmployeeGroupID(employeeGroupID)
	return o
}

// SetEmployeeGroupID adds the employeeGroupId to the employee priorities post params
func (o *EmployeePrioritiesPostParams) SetEmployeeGroupID(employeeGroupID *int64) {
	o.EmployeeGroupID = employeeGroupID
}

// WithEmployeeID adds the employeeID to the employee priorities post params
func (o *EmployeePrioritiesPostParams) WithEmployeeID(employeeID *int64) *EmployeePrioritiesPostParams {
	o.SetEmployeeID(employeeID)
	return o
}

// SetEmployeeID adds the employeeId to the employee priorities post params
func (o *EmployeePrioritiesPostParams) SetEmployeeID(employeeID *int64) {
	o.EmployeeID = employeeID
}

// WithEndDate adds the endDate to the employee priorities post params
func (o *EmployeePrioritiesPostParams) WithEndDate(endDate *string) *EmployeePrioritiesPostParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the employee priorities post params
func (o *EmployeePrioritiesPostParams) SetEndDate(endDate *string) {
	o.EndDate = endDate
}

// WithStartDate adds the startDate to the employee priorities post params
func (o *EmployeePrioritiesPostParams) WithStartDate(startDate *string) *EmployeePrioritiesPostParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the employee priorities post params
func (o *EmployeePrioritiesPostParams) SetStartDate(startDate *string) {
	o.StartDate = startDate
}

// WithValue adds the value to the employee priorities post params
func (o *EmployeePrioritiesPostParams) WithValue(value *int32) *EmployeePrioritiesPostParams {
	o.SetValue(value)
	return o
}

// SetValue adds the value to the employee priorities post params
func (o *EmployeePrioritiesPostParams) SetValue(value *int32) {
	o.Value = value
}

// WriteToRequest writes these params to a swagger request
func (o *EmployeePrioritiesPostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EmployeeGroupID != nil {

		// query param EmployeeGroupId
		var qrEmployeeGroupID int64
		if o.EmployeeGroupID != nil {
			qrEmployeeGroupID = *o.EmployeeGroupID
		}
		qEmployeeGroupID := swag.FormatInt64(qrEmployeeGroupID)
		if qEmployeeGroupID != "" {
			if err := r.SetQueryParam("EmployeeGroupId", qEmployeeGroupID); err != nil {
				return err
			}
		}

	}

	if o.EmployeeID != nil {

		// query param EmployeeId
		var qrEmployeeID int64
		if o.EmployeeID != nil {
			qrEmployeeID = *o.EmployeeID
		}
		qEmployeeID := swag.FormatInt64(qrEmployeeID)
		if qEmployeeID != "" {
			if err := r.SetQueryParam("EmployeeId", qEmployeeID); err != nil {
				return err
			}
		}

	}

	if o.EndDate != nil {

		// query param EndDate
		var qrEndDate string
		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate
		if qEndDate != "" {
			if err := r.SetQueryParam("EndDate", qEndDate); err != nil {
				return err
			}
		}

	}

	if o.StartDate != nil {

		// query param StartDate
		var qrStartDate string
		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate
		if qStartDate != "" {
			if err := r.SetQueryParam("StartDate", qStartDate); err != nil {
				return err
			}
		}

	}

	if o.Value != nil {

		// query param Value
		var qrValue int32
		if o.Value != nil {
			qrValue = *o.Value
		}
		qValue := swag.FormatInt32(qrValue)
		if qValue != "" {
			if err := r.SetQueryParam("Value", qValue); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
