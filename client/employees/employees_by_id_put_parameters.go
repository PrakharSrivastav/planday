// Code generated by go-swagger; DO NOT EDIT.

package employees

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewEmployeesByIDPutParams creates a new EmployeesByIDPutParams object
// with the default values initialized.
func NewEmployeesByIDPutParams() *EmployeesByIDPutParams {
	var (
		ignoreWarningsDefault = bool(false)
	)
	return &EmployeesByIDPutParams{
		IgnoreWarnings: &ignoreWarningsDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewEmployeesByIDPutParamsWithTimeout creates a new EmployeesByIDPutParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEmployeesByIDPutParamsWithTimeout(timeout time.Duration) *EmployeesByIDPutParams {
	var (
		ignoreWarningsDefault = bool(false)
	)
	return &EmployeesByIDPutParams{
		IgnoreWarnings: &ignoreWarningsDefault,

		timeout: timeout,
	}
}

// NewEmployeesByIDPutParamsWithContext creates a new EmployeesByIDPutParams object
// with the default values initialized, and the ability to set a context for a request
func NewEmployeesByIDPutParamsWithContext(ctx context.Context) *EmployeesByIDPutParams {
	var (
		ignoreWarningsDefault = bool(false)
	)
	return &EmployeesByIDPutParams{
		IgnoreWarnings: &ignoreWarningsDefault,

		Context: ctx,
	}
}

// NewEmployeesByIDPutParamsWithHTTPClient creates a new EmployeesByIDPutParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEmployeesByIDPutParamsWithHTTPClient(client *http.Client) *EmployeesByIDPutParams {
	var (
		ignoreWarningsDefault = bool(false)
	)
	return &EmployeesByIDPutParams{
		IgnoreWarnings: &ignoreWarningsDefault,
		HTTPClient:     client,
	}
}

/*EmployeesByIDPutParams contains all the parameters to send to the API endpoint
for the employees by Id put operation typically these are written to a http.Request
*/
type EmployeesByIDPutParams struct {

	/*ID*/
	ID int64
	/*IgnoreWarnings
	  if set to true, validation warnings will be ignored

	*/
	IgnoreWarnings *bool
	/*UpdateModel*/
	UpdateModel interface{}

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the employees by Id put params
func (o *EmployeesByIDPutParams) WithTimeout(timeout time.Duration) *EmployeesByIDPutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the employees by Id put params
func (o *EmployeesByIDPutParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the employees by Id put params
func (o *EmployeesByIDPutParams) WithContext(ctx context.Context) *EmployeesByIDPutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the employees by Id put params
func (o *EmployeesByIDPutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the employees by Id put params
func (o *EmployeesByIDPutParams) WithHTTPClient(client *http.Client) *EmployeesByIDPutParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the employees by Id put params
func (o *EmployeesByIDPutParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the employees by Id put params
func (o *EmployeesByIDPutParams) WithID(id int64) *EmployeesByIDPutParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the employees by Id put params
func (o *EmployeesByIDPutParams) SetID(id int64) {
	o.ID = id
}

// WithIgnoreWarnings adds the ignoreWarnings to the employees by Id put params
func (o *EmployeesByIDPutParams) WithIgnoreWarnings(ignoreWarnings *bool) *EmployeesByIDPutParams {
	o.SetIgnoreWarnings(ignoreWarnings)
	return o
}

// SetIgnoreWarnings adds the ignoreWarnings to the employees by Id put params
func (o *EmployeesByIDPutParams) SetIgnoreWarnings(ignoreWarnings *bool) {
	o.IgnoreWarnings = ignoreWarnings
}

// WithUpdateModel adds the updateModel to the employees by Id put params
func (o *EmployeesByIDPutParams) WithUpdateModel(updateModel interface{}) *EmployeesByIDPutParams {
	o.SetUpdateModel(updateModel)
	return o
}

// SetUpdateModel adds the updateModel to the employees by Id put params
func (o *EmployeesByIDPutParams) SetUpdateModel(updateModel interface{}) {
	o.UpdateModel = updateModel
}

// WriteToRequest writes these params to a swagger request
func (o *EmployeesByIDPutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.IgnoreWarnings != nil {

		// query param ignore_warnings
		var qrIgnoreWarnings bool
		if o.IgnoreWarnings != nil {
			qrIgnoreWarnings = *o.IgnoreWarnings
		}
		qIgnoreWarnings := swag.FormatBool(qrIgnoreWarnings)
		if qIgnoreWarnings != "" {
			if err := r.SetQueryParam("ignore_warnings", qIgnoreWarnings); err != nil {
				return err
			}
		}

	}

	if o.UpdateModel != nil {
		if err := r.SetBodyParam(o.UpdateModel); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
