// Code generated by go-swagger; DO NOT EDIT.

package employees

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewEmployeesByIDWorkhoursGetParams creates a new EmployeesByIDWorkhoursGetParams object
// with the default values initialized.
func NewEmployeesByIDWorkhoursGetParams() *EmployeesByIDWorkhoursGetParams {
	var ()
	return &EmployeesByIDWorkhoursGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewEmployeesByIDWorkhoursGetParamsWithTimeout creates a new EmployeesByIDWorkhoursGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEmployeesByIDWorkhoursGetParamsWithTimeout(timeout time.Duration) *EmployeesByIDWorkhoursGetParams {
	var ()
	return &EmployeesByIDWorkhoursGetParams{

		timeout: timeout,
	}
}

// NewEmployeesByIDWorkhoursGetParamsWithContext creates a new EmployeesByIDWorkhoursGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewEmployeesByIDWorkhoursGetParamsWithContext(ctx context.Context) *EmployeesByIDWorkhoursGetParams {
	var ()
	return &EmployeesByIDWorkhoursGetParams{

		Context: ctx,
	}
}

// NewEmployeesByIDWorkhoursGetParamsWithHTTPClient creates a new EmployeesByIDWorkhoursGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEmployeesByIDWorkhoursGetParamsWithHTTPClient(client *http.Client) *EmployeesByIDWorkhoursGetParams {
	var ()
	return &EmployeesByIDWorkhoursGetParams{
		HTTPClient: client,
	}
}

/*EmployeesByIDWorkhoursGetParams contains all the parameters to send to the API endpoint
for the employees by Id workhours get operation typically these are written to a http.Request
*/
type EmployeesByIDWorkhoursGetParams struct {

	/*Fromdate*/
	Fromdate *strfmt.DateTime
	/*ID*/
	ID int64
	/*Todate*/
	Todate *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the employees by Id workhours get params
func (o *EmployeesByIDWorkhoursGetParams) WithTimeout(timeout time.Duration) *EmployeesByIDWorkhoursGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the employees by Id workhours get params
func (o *EmployeesByIDWorkhoursGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the employees by Id workhours get params
func (o *EmployeesByIDWorkhoursGetParams) WithContext(ctx context.Context) *EmployeesByIDWorkhoursGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the employees by Id workhours get params
func (o *EmployeesByIDWorkhoursGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the employees by Id workhours get params
func (o *EmployeesByIDWorkhoursGetParams) WithHTTPClient(client *http.Client) *EmployeesByIDWorkhoursGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the employees by Id workhours get params
func (o *EmployeesByIDWorkhoursGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFromdate adds the fromdate to the employees by Id workhours get params
func (o *EmployeesByIDWorkhoursGetParams) WithFromdate(fromdate *strfmt.DateTime) *EmployeesByIDWorkhoursGetParams {
	o.SetFromdate(fromdate)
	return o
}

// SetFromdate adds the fromdate to the employees by Id workhours get params
func (o *EmployeesByIDWorkhoursGetParams) SetFromdate(fromdate *strfmt.DateTime) {
	o.Fromdate = fromdate
}

// WithID adds the id to the employees by Id workhours get params
func (o *EmployeesByIDWorkhoursGetParams) WithID(id int64) *EmployeesByIDWorkhoursGetParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the employees by Id workhours get params
func (o *EmployeesByIDWorkhoursGetParams) SetID(id int64) {
	o.ID = id
}

// WithTodate adds the todate to the employees by Id workhours get params
func (o *EmployeesByIDWorkhoursGetParams) WithTodate(todate *strfmt.DateTime) *EmployeesByIDWorkhoursGetParams {
	o.SetTodate(todate)
	return o
}

// SetTodate adds the todate to the employees by Id workhours get params
func (o *EmployeesByIDWorkhoursGetParams) SetTodate(todate *strfmt.DateTime) {
	o.Todate = todate
}

// WriteToRequest writes these params to a swagger request
func (o *EmployeesByIDWorkhoursGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Fromdate != nil {

		// query param fromdate
		var qrFromdate strfmt.DateTime
		if o.Fromdate != nil {
			qrFromdate = *o.Fromdate
		}
		qFromdate := qrFromdate.String()
		if qFromdate != "" {
			if err := r.SetQueryParam("fromdate", qFromdate); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.Todate != nil {

		// query param todate
		var qrTodate strfmt.DateTime
		if o.Todate != nil {
			qrTodate = *o.Todate
		}
		qTodate := qrTodate.String()
		if qTodate != "" {
			if err := r.SetQueryParam("todate", qTodate); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
