// Code generated by go-swagger; DO NOT EDIT.

package employees

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new employees API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for employees API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
EmployeesByIDGet gets employee with specific id
*/
func (a *Client) EmployeesByIDGet(params *EmployeesByIDGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeesByIdGet",
		Method:             "GET",
		PathPattern:        "/employees/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeesByIDGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeesByIDGetOK), nil

}

/*
EmployeesByIDPut updates an employee
*/
func (a *Client) EmployeesByIDPut(params *EmployeesByIDPutParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeesByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeesByIdPut",
		Method:             "PUT",
		PathPattern:        "/employees/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeesByIDPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeesByIDPutOK), nil

}

/*
EmployeesByIDWorkhoursGet gets the hours of a employee within a period
*/
func (a *Client) EmployeesByIDWorkhoursGet(params *EmployeesByIDWorkhoursGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeesByIDWorkhoursGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeesByIDWorkhoursGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeesByIdWorkhoursGet",
		Method:             "GET",
		PathPattern:        "/employees/{id}/workhours",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeesByIDWorkhoursGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeesByIDWorkhoursGetOK), nil

}

/*
EmployeesGet returns the filtered sorted and paged list of employees in a portal defined by user token
*/
func (a *Client) EmployeesGet(params *EmployeesGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeesGet",
		Method:             "GET",
		PathPattern:        "/employees",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeesGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeesGetOK), nil

}

/*
EmployeesPost creates an employee
*/
func (a *Client) EmployeesPost(params *EmployeesPostParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeesPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeesPost",
		Method:             "POST",
		PathPattern:        "/employees",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeesPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeesPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
