// Code generated by go-swagger; DO NOT EDIT.

package employees

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewEmployeesGetParams creates a new EmployeesGetParams object
// with the default values initialized.
func NewEmployeesGetParams() *EmployeesGetParams {
	var (
		orderDefault       = string("Ascending")
		orderByDefault     = string("")
		presetIDDefault    = string("")
		searchQueryDefault = string("")
	)
	return &EmployeesGetParams{
		Order:       &orderDefault,
		OrderBy:     &orderByDefault,
		PresetID:    &presetIDDefault,
		SearchQuery: &searchQueryDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewEmployeesGetParamsWithTimeout creates a new EmployeesGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEmployeesGetParamsWithTimeout(timeout time.Duration) *EmployeesGetParams {
	var (
		orderDefault       = string("Ascending")
		orderByDefault     = string("")
		presetIDDefault    = string("")
		searchQueryDefault = string("")
	)
	return &EmployeesGetParams{
		Order:       &orderDefault,
		OrderBy:     &orderByDefault,
		PresetID:    &presetIDDefault,
		SearchQuery: &searchQueryDefault,

		timeout: timeout,
	}
}

// NewEmployeesGetParamsWithContext creates a new EmployeesGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewEmployeesGetParamsWithContext(ctx context.Context) *EmployeesGetParams {
	var (
		orderDefault       = string("Ascending")
		orderByDefault     = string("")
		presetIdDefault    = string("")
		searchQueryDefault = string("")
	)
	return &EmployeesGetParams{
		Order:       &orderDefault,
		OrderBy:     &orderByDefault,
		PresetID:    &presetIdDefault,
		SearchQuery: &searchQueryDefault,

		Context: ctx,
	}
}

// NewEmployeesGetParamsWithHTTPClient creates a new EmployeesGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEmployeesGetParamsWithHTTPClient(client *http.Client) *EmployeesGetParams {
	var (
		orderDefault       = string("Ascending")
		orderByDefault     = string("")
		presetIdDefault    = string("")
		searchQueryDefault = string("")
	)
	return &EmployeesGetParams{
		Order:       &orderDefault,
		OrderBy:     &orderByDefault,
		PresetID:    &presetIdDefault,
		SearchQuery: &searchQueryDefault,
		HTTPClient:  client,
	}
}

/*EmployeesGetParams contains all the parameters to send to the API endpoint
for the employees get operation typically these are written to a http.Request
*/
type EmployeesGetParams struct {

	/*DepartmentID
	  Return only employees that are members of department "department_id".

	*/
	DepartmentID *int64
	/*Fields
	  Indicates which fields should be included for each employee. The only allowed version right now is "id,name,has_avatar". Only compatible with limit, offset, order and order_by; other parameters cannot be used.

	*/
	Fields *string
	/*Limit
	  Return no more than "limit" records

	*/
	Limit *int32
	/*ModifiedAfter
	  Retrieve only employees that were modified after this date. The date is UTC in ISO 8601 format (yyyy-MM-ddTHH:mm:ssZ)

	*/
	ModifiedAfter *strfmt.DateTime
	/*NameOnlySearch
	  Search in employee's name only

	*/
	NameOnlySearch *bool
	/*Offset
	  Skip first "offset" records (for paging purposes)

	*/
	Offset *int32
	/*Order
	  Sort order - ascending or descending

	*/
	Order *string
	/*OrderBy
	  The name of the resulting view property to order by

	*/
	OrderBy *string
	/*PresetID
	  The predefined filter preset id like QRY_DEACTIVATED or QRY_NO_ROLE

	*/
	PresetID *string
	/*RoleID
	  Return only employees that are members of employee group "role_id".

	*/
	RoleID *int64
	/*SearchQuery
	  The freetext search query

	*/
	SearchQuery *string
	/*SecurityGroupID
	  Return only employees that are members of security group "security_group_id".

	*/
	SecurityGroupID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the employees get params
func (o *EmployeesGetParams) WithTimeout(timeout time.Duration) *EmployeesGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the employees get params
func (o *EmployeesGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the employees get params
func (o *EmployeesGetParams) WithContext(ctx context.Context) *EmployeesGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the employees get params
func (o *EmployeesGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the employees get params
func (o *EmployeesGetParams) WithHTTPClient(client *http.Client) *EmployeesGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the employees get params
func (o *EmployeesGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDepartmentID adds the departmentID to the employees get params
func (o *EmployeesGetParams) WithDepartmentID(departmentID *int64) *EmployeesGetParams {
	o.SetDepartmentID(departmentID)
	return o
}

// SetDepartmentID adds the departmentId to the employees get params
func (o *EmployeesGetParams) SetDepartmentID(departmentID *int64) {
	o.DepartmentID = departmentID
}

// WithFields adds the fields to the employees get params
func (o *EmployeesGetParams) WithFields(fields *string) *EmployeesGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the employees get params
func (o *EmployeesGetParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithLimit adds the limit to the employees get params
func (o *EmployeesGetParams) WithLimit(limit *int32) *EmployeesGetParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the employees get params
func (o *EmployeesGetParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithModifiedAfter adds the modifiedAfter to the employees get params
func (o *EmployeesGetParams) WithModifiedAfter(modifiedAfter *strfmt.DateTime) *EmployeesGetParams {
	o.SetModifiedAfter(modifiedAfter)
	return o
}

// SetModifiedAfter adds the modifiedAfter to the employees get params
func (o *EmployeesGetParams) SetModifiedAfter(modifiedAfter *strfmt.DateTime) {
	o.ModifiedAfter = modifiedAfter
}

// WithNameOnlySearch adds the nameOnlySearch to the employees get params
func (o *EmployeesGetParams) WithNameOnlySearch(nameOnlySearch *bool) *EmployeesGetParams {
	o.SetNameOnlySearch(nameOnlySearch)
	return o
}

// SetNameOnlySearch adds the nameOnlySearch to the employees get params
func (o *EmployeesGetParams) SetNameOnlySearch(nameOnlySearch *bool) {
	o.NameOnlySearch = nameOnlySearch
}

// WithOffset adds the offset to the employees get params
func (o *EmployeesGetParams) WithOffset(offset *int32) *EmployeesGetParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the employees get params
func (o *EmployeesGetParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithOrder adds the order to the employees get params
func (o *EmployeesGetParams) WithOrder(order *string) *EmployeesGetParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the employees get params
func (o *EmployeesGetParams) SetOrder(order *string) {
	o.Order = order
}

// WithOrderBy adds the orderBy to the employees get params
func (o *EmployeesGetParams) WithOrderBy(orderBy *string) *EmployeesGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the employees get params
func (o *EmployeesGetParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithPresetID adds the presetID to the employees get params
func (o *EmployeesGetParams) WithPresetID(presetID *string) *EmployeesGetParams {
	o.SetPresetID(presetID)
	return o
}

// SetPresetID adds the presetId to the employees get params
func (o *EmployeesGetParams) SetPresetID(presetID *string) {
	o.PresetID = presetID
}

// WithRoleID adds the roleID to the employees get params
func (o *EmployeesGetParams) WithRoleID(roleID *int64) *EmployeesGetParams {
	o.SetRoleID(roleID)
	return o
}

// SetRoleID adds the roleId to the employees get params
func (o *EmployeesGetParams) SetRoleID(roleID *int64) {
	o.RoleID = roleID
}

// WithSearchQuery adds the searchQuery to the employees get params
func (o *EmployeesGetParams) WithSearchQuery(searchQuery *string) *EmployeesGetParams {
	o.SetSearchQuery(searchQuery)
	return o
}

// SetSearchQuery adds the searchQuery to the employees get params
func (o *EmployeesGetParams) SetSearchQuery(searchQuery *string) {
	o.SearchQuery = searchQuery
}

// WithSecurityGroupID adds the securityGroupID to the employees get params
func (o *EmployeesGetParams) WithSecurityGroupID(securityGroupID *int64) *EmployeesGetParams {
	o.SetSecurityGroupID(securityGroupID)
	return o
}

// SetSecurityGroupID adds the securityGroupId to the employees get params
func (o *EmployeesGetParams) SetSecurityGroupID(securityGroupID *int64) {
	o.SecurityGroupID = securityGroupID
}

// WriteToRequest writes these params to a swagger request
func (o *EmployeesGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DepartmentID != nil {

		// query param department_id
		var qrDepartmentID int64
		if o.DepartmentID != nil {
			qrDepartmentID = *o.DepartmentID
		}
		qDepartmentID := swag.FormatInt64(qrDepartmentID)
		if qDepartmentID != "" {
			if err := r.SetQueryParam("department_id", qDepartmentID); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.ModifiedAfter != nil {

		// query param modified_after
		var qrModifiedAfter strfmt.DateTime
		if o.ModifiedAfter != nil {
			qrModifiedAfter = *o.ModifiedAfter
		}
		qModifiedAfter := qrModifiedAfter.String()
		if qModifiedAfter != "" {
			if err := r.SetQueryParam("modified_after", qModifiedAfter); err != nil {
				return err
			}
		}

	}

	if o.NameOnlySearch != nil {

		// query param name_only_search
		var qrNameOnlySearch bool
		if o.NameOnlySearch != nil {
			qrNameOnlySearch = *o.NameOnlySearch
		}
		qNameOnlySearch := swag.FormatBool(qrNameOnlySearch)
		if qNameOnlySearch != "" {
			if err := r.SetQueryParam("name_only_search", qNameOnlySearch); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Order != nil {

		// query param order
		var qrOrder string
		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {
			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}

	}

	if o.OrderBy != nil {

		// query param order_by
		var qrOrderBy string
		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {
			if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
				return err
			}
		}

	}

	if o.PresetID != nil {

		// query param preset_id
		var qrPresetID string
		if o.PresetID != nil {
			qrPresetID = *o.PresetID
		}
		qPresetID := qrPresetID
		if qPresetID != "" {
			if err := r.SetQueryParam("preset_id", qPresetID); err != nil {
				return err
			}
		}

	}

	if o.RoleID != nil {

		// query param role_id
		var qrRoleID int64
		if o.RoleID != nil {
			qrRoleID = *o.RoleID
		}
		qRoleID := swag.FormatInt64(qrRoleID)
		if qRoleID != "" {
			if err := r.SetQueryParam("role_id", qRoleID); err != nil {
				return err
			}
		}

	}

	if o.SearchQuery != nil {

		// query param search_query
		var qrSearchQuery string
		if o.SearchQuery != nil {
			qrSearchQuery = *o.SearchQuery
		}
		qSearchQuery := qrSearchQuery
		if qSearchQuery != "" {
			if err := r.SetQueryParam("search_query", qSearchQuery); err != nil {
				return err
			}
		}

	}

	if o.SecurityGroupID != nil {

		// query param security_group_id
		var qrSecurityGroupID int64
		if o.SecurityGroupID != nil {
			qrSecurityGroupID = *o.SecurityGroupID
		}
		qSecurityGroupID := swag.FormatInt64(qrSecurityGroupID)
		if qSecurityGroupID != "" {
			if err := r.SetQueryParam("security_group_id", qSecurityGroupID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
