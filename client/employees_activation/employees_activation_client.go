// Code generated by go-swagger; DO NOT EDIT.

package employees_activation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new employees activation API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for employees activation API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
EmployeesByIDDelete deactivates an employee after a specified date or immediately

If a past date is used, the employee will be deactivated immediately. If the date is today or in the future (compared to current date of the employee's portal), the employee will have access until the end of that date.
If no date is provided, the employee loses access immediately and the deactivation date is set to the portal's current date.
*/
func (a *Client) EmployeesByIDDelete(params *EmployeesByIDDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeesByIDDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeesByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/employees/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeesByIDDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
EmployeesByIDReactivatePut reactivates an employee on the specific date and with a optional reason
*/
func (a *Client) EmployeesByIDReactivatePut(params *EmployeesByIDReactivatePutParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeesByIDReactivatePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeesByIDReactivatePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeesByIdReactivatePut",
		Method:             "PUT",
		PathPattern:        "/employees/{id}/reactivate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeesByIDReactivatePutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeesByIDReactivatePutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
