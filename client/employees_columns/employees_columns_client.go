// Code generated by go-swagger; DO NOT EDIT.

package employees_columns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new employees columns API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for employees columns API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
EmployeesAllcolumnsGet returns columns the employee can select between
*/
func (a *Client) EmployeesAllcolumnsGet(params *EmployeesAllcolumnsGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeesAllcolumnsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeesAllcolumnsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeesAllcolumnsGet",
		Method:             "GET",
		PathPattern:        "/employees/allcolumns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeesAllcolumnsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeesAllcolumnsGetOK), nil

}

/*
EmployeesByIDColumnsGet returns employee selected coloumns
*/
func (a *Client) EmployeesByIDColumnsGet(params *EmployeesByIDColumnsGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeesByIDColumnsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeesByIDColumnsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeesByIdColumnsGet",
		Method:             "GET",
		PathPattern:        "/employees/{id}/columns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeesByIDColumnsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeesByIDColumnsGetOK), nil

}

/*
EmployeesByIDColumnsPut updates employee selected coloumns
*/
func (a *Client) EmployeesByIDColumnsPut(params *EmployeesByIDColumnsPutParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeesByIDColumnsPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeesByIDColumnsPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeesByIdColumnsPut",
		Method:             "PUT",
		PathPattern:        "/employees/{id}/columns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeesByIDColumnsPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeesByIDColumnsPutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
