// Code generated by go-swagger; DO NOT EDIT.

package employees_contract_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewEmployeesByIDContractrulePutParams creates a new EmployeesByIDContractrulePutParams object
// with the default values initialized.
func NewEmployeesByIDContractrulePutParams() *EmployeesByIDContractrulePutParams {
	var ()
	return &EmployeesByIDContractrulePutParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewEmployeesByIDContractrulePutParamsWithTimeout creates a new EmployeesByIDContractrulePutParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEmployeesByIDContractrulePutParamsWithTimeout(timeout time.Duration) *EmployeesByIDContractrulePutParams {
	var ()
	return &EmployeesByIDContractrulePutParams{

		timeout: timeout,
	}
}

// NewEmployeesByIDContractrulePutParamsWithContext creates a new EmployeesByIDContractrulePutParams object
// with the default values initialized, and the ability to set a context for a request
func NewEmployeesByIDContractrulePutParamsWithContext(ctx context.Context) *EmployeesByIDContractrulePutParams {
	var ()
	return &EmployeesByIDContractrulePutParams{

		Context: ctx,
	}
}

// NewEmployeesByIDContractrulePutParamsWithHTTPClient creates a new EmployeesByIDContractrulePutParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEmployeesByIDContractrulePutParamsWithHTTPClient(client *http.Client) *EmployeesByIDContractrulePutParams {
	var ()
	return &EmployeesByIDContractrulePutParams{
		HTTPClient: client,
	}
}

/*EmployeesByIDContractrulePutParams contains all the parameters to send to the API endpoint
for the employees by Id contractrule put operation typically these are written to a http.Request
*/
type EmployeesByIDContractrulePutParams struct {

	/*ID*/
	ID int64
	/*RuleID*/
	RuleID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the employees by Id contractrule put params
func (o *EmployeesByIDContractrulePutParams) WithTimeout(timeout time.Duration) *EmployeesByIDContractrulePutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the employees by Id contractrule put params
func (o *EmployeesByIDContractrulePutParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the employees by Id contractrule put params
func (o *EmployeesByIDContractrulePutParams) WithContext(ctx context.Context) *EmployeesByIDContractrulePutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the employees by Id contractrule put params
func (o *EmployeesByIDContractrulePutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the employees by Id contractrule put params
func (o *EmployeesByIDContractrulePutParams) WithHTTPClient(client *http.Client) *EmployeesByIDContractrulePutParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the employees by Id contractrule put params
func (o *EmployeesByIDContractrulePutParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the employees by Id contractrule put params
func (o *EmployeesByIDContractrulePutParams) WithID(id int64) *EmployeesByIDContractrulePutParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the employees by Id contractrule put params
func (o *EmployeesByIDContractrulePutParams) SetID(id int64) {
	o.ID = id
}

// WithRuleID adds the ruleID to the employees by Id contractrule put params
func (o *EmployeesByIDContractrulePutParams) WithRuleID(ruleID *int64) *EmployeesByIDContractrulePutParams {
	o.SetRuleID(ruleID)
	return o
}

// SetRuleID adds the ruleId to the employees by Id contractrule put params
func (o *EmployeesByIDContractrulePutParams) SetRuleID(ruleID *int64) {
	o.RuleID = ruleID
}

// WriteToRequest writes these params to a swagger request
func (o *EmployeesByIDContractrulePutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.RuleID != nil {

		// query param ruleId
		var qrRuleID int64
		if o.RuleID != nil {
			qrRuleID = *o.RuleID
		}
		qRuleID := swag.FormatInt64(qrRuleID)
		if qRuleID != "" {
			if err := r.SetQueryParam("ruleId", qRuleID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
