// Code generated by go-swagger; DO NOT EDIT.

package employees_contract_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewEmployeesByIDIntervalByIntervalidGetParams creates a new EmployeesByIDIntervalByIntervalidGetParams object
// with the default values initialized.
func NewEmployeesByIDIntervalByIntervalidGetParams() *EmployeesByIDIntervalByIntervalidGetParams {
	var ()
	return &EmployeesByIDIntervalByIntervalidGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewEmployeesByIDIntervalByIntervalidGetParamsWithTimeout creates a new EmployeesByIDIntervalByIntervalidGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEmployeesByIDIntervalByIntervalidGetParamsWithTimeout(timeout time.Duration) *EmployeesByIDIntervalByIntervalidGetParams {
	var ()
	return &EmployeesByIDIntervalByIntervalidGetParams{

		timeout: timeout,
	}
}

// NewEmployeesByIDIntervalByIntervalidGetParamsWithContext creates a new EmployeesByIDIntervalByIntervalidGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewEmployeesByIDIntervalByIntervalidGetParamsWithContext(ctx context.Context) *EmployeesByIDIntervalByIntervalidGetParams {
	var ()
	return &EmployeesByIDIntervalByIntervalidGetParams{

		Context: ctx,
	}
}

// NewEmployeesByIDIntervalByIntervalidGetParamsWithHTTPClient creates a new EmployeesByIDIntervalByIntervalidGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEmployeesByIDIntervalByIntervalidGetParamsWithHTTPClient(client *http.Client) *EmployeesByIDIntervalByIntervalidGetParams {
	var ()
	return &EmployeesByIDIntervalByIntervalidGetParams{
		HTTPClient: client,
	}
}

/*EmployeesByIDIntervalByIntervalidGetParams contains all the parameters to send to the API endpoint
for the employees by Id interval by intervalid get operation typically these are written to a http.Request
*/
type EmployeesByIDIntervalByIntervalidGetParams struct {

	/*Date*/
	Date *strfmt.DateTime
	/*Departmentid*/
	Departmentid *int64
	/*ID*/
	ID int64
	/*Intervalid*/
	Intervalid int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the employees by Id interval by intervalid get params
func (o *EmployeesByIDIntervalByIntervalidGetParams) WithTimeout(timeout time.Duration) *EmployeesByIDIntervalByIntervalidGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the employees by Id interval by intervalid get params
func (o *EmployeesByIDIntervalByIntervalidGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the employees by Id interval by intervalid get params
func (o *EmployeesByIDIntervalByIntervalidGetParams) WithContext(ctx context.Context) *EmployeesByIDIntervalByIntervalidGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the employees by Id interval by intervalid get params
func (o *EmployeesByIDIntervalByIntervalidGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the employees by Id interval by intervalid get params
func (o *EmployeesByIDIntervalByIntervalidGetParams) WithHTTPClient(client *http.Client) *EmployeesByIDIntervalByIntervalidGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the employees by Id interval by intervalid get params
func (o *EmployeesByIDIntervalByIntervalidGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDate adds the date to the employees by Id interval by intervalid get params
func (o *EmployeesByIDIntervalByIntervalidGetParams) WithDate(date *strfmt.DateTime) *EmployeesByIDIntervalByIntervalidGetParams {
	o.SetDate(date)
	return o
}

// SetDate adds the date to the employees by Id interval by intervalid get params
func (o *EmployeesByIDIntervalByIntervalidGetParams) SetDate(date *strfmt.DateTime) {
	o.Date = date
}

// WithDepartmentid adds the departmentid to the employees by Id interval by intervalid get params
func (o *EmployeesByIDIntervalByIntervalidGetParams) WithDepartmentid(departmentid *int64) *EmployeesByIDIntervalByIntervalidGetParams {
	o.SetDepartmentid(departmentid)
	return o
}

// SetDepartmentid adds the departmentid to the employees by Id interval by intervalid get params
func (o *EmployeesByIDIntervalByIntervalidGetParams) SetDepartmentid(departmentid *int64) {
	o.Departmentid = departmentid
}

// WithID adds the id to the employees by Id interval by intervalid get params
func (o *EmployeesByIDIntervalByIntervalidGetParams) WithID(id int64) *EmployeesByIDIntervalByIntervalidGetParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the employees by Id interval by intervalid get params
func (o *EmployeesByIDIntervalByIntervalidGetParams) SetID(id int64) {
	o.ID = id
}

// WithIntervalid adds the intervalid to the employees by Id interval by intervalid get params
func (o *EmployeesByIDIntervalByIntervalidGetParams) WithIntervalid(intervalid int64) *EmployeesByIDIntervalByIntervalidGetParams {
	o.SetIntervalid(intervalid)
	return o
}

// SetIntervalid adds the intervalid to the employees by Id interval by intervalid get params
func (o *EmployeesByIDIntervalByIntervalidGetParams) SetIntervalid(intervalid int64) {
	o.Intervalid = intervalid
}

// WriteToRequest writes these params to a swagger request
func (o *EmployeesByIDIntervalByIntervalidGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Date != nil {

		// query param date
		var qrDate strfmt.DateTime
		if o.Date != nil {
			qrDate = *o.Date
		}
		qDate := qrDate.String()
		if qDate != "" {
			if err := r.SetQueryParam("date", qDate); err != nil {
				return err
			}
		}

	}

	if o.Departmentid != nil {

		// query param departmentid
		var qrDepartmentid int64
		if o.Departmentid != nil {
			qrDepartmentid = *o.Departmentid
		}
		qDepartmentid := swag.FormatInt64(qrDepartmentid)
		if qDepartmentid != "" {
			if err := r.SetQueryParam("departmentid", qDepartmentid); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	// path param intervalid
	if err := r.SetPathParam("intervalid", swag.FormatInt64(o.Intervalid)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
