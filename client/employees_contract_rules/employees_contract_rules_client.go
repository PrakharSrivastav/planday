// Code generated by go-swagger; DO NOT EDIT.

package employees_contract_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new employees contract rules API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for employees contract rules API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
EmployeesByIDContractrulePut reactivates an employee on the specific date and with a optional reason
*/
func (a *Client) EmployeesByIDContractrulePut(params *EmployeesByIDContractrulePutParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeesByIDContractrulePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeesByIDContractrulePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeesByIdContractrulePut",
		Method:             "PUT",
		PathPattern:        "/employees/{id}/contractrule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeesByIDContractrulePutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeesByIDContractrulePutOK), nil

}

/*
EmployeesByIDIntervalByIntervalidGet gets the hours of a employee within a contract rule interval
*/
func (a *Client) EmployeesByIDIntervalByIntervalidGet(params *EmployeesByIDIntervalByIntervalidGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeesByIDIntervalByIntervalidGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeesByIDIntervalByIntervalidGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeesByIdIntervalByIntervalidGet",
		Method:             "GET",
		PathPattern:        "/employees/{id}/interval/{intervalid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeesByIDIntervalByIntervalidGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeesByIDIntervalByIntervalidGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
