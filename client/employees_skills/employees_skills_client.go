// Code generated by go-swagger; DO NOT EDIT.

package employees_skills

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new employees skills API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for employees skills API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
EmployeesByIDCreateSkillsPost creates skills
*/
func (a *Client) EmployeesByIDCreateSkillsPost(params *EmployeesByIDCreateSkillsPostParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeesByIDCreateSkillsPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeesByIDCreateSkillsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeesByIdCreateSkillsPost",
		Method:             "POST",
		PathPattern:        "/employees/{id}/create/skills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeesByIDCreateSkillsPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeesByIDCreateSkillsPostOK), nil

}

/*
EmployeesByIDDeleteSkillsPost delteds skills
*/
func (a *Client) EmployeesByIDDeleteSkillsPost(params *EmployeesByIDDeleteSkillsPostParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeesByIDDeleteSkillsPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeesByIDDeleteSkillsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeesByIdDeleteSkillsPost",
		Method:             "POST",
		PathPattern:        "/employees/{id}/delete/skills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeesByIDDeleteSkillsPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeesByIDDeleteSkillsPostOK), nil

}

/*
EmployeesSkillsGet gets skills
*/
func (a *Client) EmployeesSkillsGet(params *EmployeesSkillsGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeesSkillsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeesSkillsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeesSkillsGet",
		Method:             "GET",
		PathPattern:        "/employees/skills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeesSkillsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeesSkillsGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
