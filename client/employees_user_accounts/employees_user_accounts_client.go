// Code generated by go-swagger; DO NOT EDIT.

package employees_user_accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new employees user accounts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for employees user accounts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
EmployeesByIDResetPasswordPut resets the password for the user identified by id
*/
func (a *Client) EmployeesByIDResetPasswordPut(params *EmployeesByIDResetPasswordPutParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeesByIDResetPasswordPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeesByIDResetPasswordPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeesByIdReset_passwordPut",
		Method:             "PUT",
		PathPattern:        "/employees/{id}/reset_password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeesByIDResetPasswordPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeesByIDResetPasswordPutOK), nil

}

/*
EmployeesByIDSendSmsWelcomeMessagePut sends a welcome s m s to user identified by id
*/
func (a *Client) EmployeesByIDSendSmsWelcomeMessagePut(params *EmployeesByIDSendSmsWelcomeMessagePutParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeesByIDSendSmsWelcomeMessagePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeesByIDSendSmsWelcomeMessagePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeesByIdSend_sms_welcome_messagePut",
		Method:             "PUT",
		PathPattern:        "/employees/{id}/send_sms_welcome_message",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeesByIDSendSmsWelcomeMessagePutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeesByIDSendSmsWelcomeMessagePutOK), nil

}

/*
EmployeesByIDSendWelcomeMessagePut sends a welcome email to user identified by id
*/
func (a *Client) EmployeesByIDSendWelcomeMessagePut(params *EmployeesByIDSendWelcomeMessagePutParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeesByIDSendWelcomeMessagePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeesByIDSendWelcomeMessagePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeesByIdSend_welcome_messagePut",
		Method:             "PUT",
		PathPattern:        "/employees/{id}/send_welcome_message",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeesByIDSendWelcomeMessagePutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeesByIDSendWelcomeMessagePutOK), nil

}

/*
EmployeesUsernameInUseGet employees username in use get API
*/
func (a *Client) EmployeesUsernameInUseGet(params *EmployeesUsernameInUseGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeesUsernameInUseGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeesUsernameInUseGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeesUsername_in_useGet",
		Method:             "GET",
		PathPattern:        "/employees/username_in_use",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EmployeesUsernameInUseGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmployeesUsernameInUseGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
