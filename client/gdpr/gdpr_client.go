// Code generated by go-swagger; DO NOT EDIT.

package gdpr

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new gdpr API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for gdpr API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GdprPortalsByPortalAliasGdprStatusGet gets gdpr status of portal
*/
func (a *Client) GdprPortalsByPortalAliasGdprStatusGet(params *GdprPortalsByPortalAliasGdprStatusGetParams, authInfo runtime.ClientAuthInfoWriter) (*GdprPortalsByPortalAliasGdprStatusGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGdprPortalsByPortalAliasGdprStatusGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GdprPortalsByPortal_aliasGdpr_statusGet",
		Method:             "GET",
		PathPattern:        "/gdpr/portals/{portal_alias}/gdpr_status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GdprPortalsByPortalAliasGdprStatusGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GdprPortalsByPortalAliasGdprStatusGetOK), nil

}

/*
GdprPortalsRtbfStatusGet gets right to be forgotten status of portal
*/
func (a *Client) GdprPortalsRtbfStatusGet(params *GdprPortalsRtbfStatusGetParams, authInfo runtime.ClientAuthInfoWriter) (*GdprPortalsRtbfStatusGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGdprPortalsRtbfStatusGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GdprPortalsRtbf_statusGet",
		Method:             "GET",
		PathPattern:        "/gdpr/portals/rtbf_status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GdprPortalsRtbfStatusGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GdprPortalsRtbfStatusGetOK), nil

}

/*
GdprPortalsRtbfStatusPut sets right to be forgotten status of portal
*/
func (a *Client) GdprPortalsRtbfStatusPut(params *GdprPortalsRtbfStatusPutParams, authInfo runtime.ClientAuthInfoWriter) (*GdprPortalsRtbfStatusPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGdprPortalsRtbfStatusPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GdprPortalsRtbf_statusPut",
		Method:             "PUT",
		PathPattern:        "/gdpr/portals/rtbf_status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GdprPortalsRtbfStatusPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GdprPortalsRtbfStatusPutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
