// Code generated by go-swagger; DO NOT EDIT.

package pay_rates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPayRatesGetParams creates a new PayRatesGetParams object
// with the default values initialized.
func NewPayRatesGetParams() *PayRatesGetParams {
	var ()
	return &PayRatesGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPayRatesGetParamsWithTimeout creates a new PayRatesGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPayRatesGetParamsWithTimeout(timeout time.Duration) *PayRatesGetParams {
	var ()
	return &PayRatesGetParams{

		timeout: timeout,
	}
}

// NewPayRatesGetParamsWithContext creates a new PayRatesGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewPayRatesGetParamsWithContext(ctx context.Context) *PayRatesGetParams {
	var ()
	return &PayRatesGetParams{

		Context: ctx,
	}
}

// NewPayRatesGetParamsWithHTTPClient creates a new PayRatesGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPayRatesGetParamsWithHTTPClient(client *http.Client) *PayRatesGetParams {
	var ()
	return &PayRatesGetParams{
		HTTPClient: client,
	}
}

/*PayRatesGetParams contains all the parameters to send to the API endpoint
for the pay rates get operation typically these are written to a http.Request
*/
type PayRatesGetParams struct {

	/*EmployeeID*/
	EmployeeID *int64
	/*RoleID*/
	RoleID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the pay rates get params
func (o *PayRatesGetParams) WithTimeout(timeout time.Duration) *PayRatesGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the pay rates get params
func (o *PayRatesGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the pay rates get params
func (o *PayRatesGetParams) WithContext(ctx context.Context) *PayRatesGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the pay rates get params
func (o *PayRatesGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the pay rates get params
func (o *PayRatesGetParams) WithHTTPClient(client *http.Client) *PayRatesGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the pay rates get params
func (o *PayRatesGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmployeeID adds the employeeID to the pay rates get params
func (o *PayRatesGetParams) WithEmployeeID(employeeID *int64) *PayRatesGetParams {
	o.SetEmployeeID(employeeID)
	return o
}

// SetEmployeeID adds the employeeId to the pay rates get params
func (o *PayRatesGetParams) SetEmployeeID(employeeID *int64) {
	o.EmployeeID = employeeID
}

// WithRoleID adds the roleID to the pay rates get params
func (o *PayRatesGetParams) WithRoleID(roleID *int64) *PayRatesGetParams {
	o.SetRoleID(roleID)
	return o
}

// SetRoleID adds the roleId to the pay rates get params
func (o *PayRatesGetParams) SetRoleID(roleID *int64) {
	o.RoleID = roleID
}

// WriteToRequest writes these params to a swagger request
func (o *PayRatesGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EmployeeID != nil {

		// query param employee_id
		var qrEmployeeID int64
		if o.EmployeeID != nil {
			qrEmployeeID = *o.EmployeeID
		}
		qEmployeeID := swag.FormatInt64(qrEmployeeID)
		if qEmployeeID != "" {
			if err := r.SetQueryParam("employee_id", qEmployeeID); err != nil {
				return err
			}
		}

	}

	if o.RoleID != nil {

		// query param role_id
		var qrRoleID int64
		if o.RoleID != nil {
			qrRoleID = *o.RoleID
		}
		qRoleID := swag.FormatInt64(qrRoleID)
		if qRoleID != "" {
			if err := r.SetQueryParam("role_id", qRoleID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
