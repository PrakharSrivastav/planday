// Code generated by go-swagger; DO NOT EDIT.

package portal_employee_form_definitions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new portal employee form definitions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for portal employee form definitions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PortalsByPortalIDFormsEmployeeGet returns the employee fields form for the portal
*/
func (a *Client) PortalsByPortalIDFormsEmployeeGet(params *PortalsByPortalIDFormsEmployeeGetParams, authInfo runtime.ClientAuthInfoWriter) (*PortalsByPortalIDFormsEmployeeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPortalsByPortalIDFormsEmployeeGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PortalsByPortal_idFormsEmployeeGet",
		Method:             "GET",
		PathPattern:        "/portals/{portal_id}/forms/employee",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PortalsByPortalIDFormsEmployeeGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PortalsByPortalIDFormsEmployeeGetOK), nil

}

/*
PortalsByPortalIDFormsEmployeePut updates the employee form fields for the portal
*/
func (a *Client) PortalsByPortalIDFormsEmployeePut(params *PortalsByPortalIDFormsEmployeePutParams, authInfo runtime.ClientAuthInfoWriter) (*PortalsByPortalIDFormsEmployeePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPortalsByPortalIDFormsEmployeePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PortalsByPortal_idFormsEmployeePut",
		Method:             "PUT",
		PathPattern:        "/portals/{portal_id}/forms/employee",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PortalsByPortalIDFormsEmployeePutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PortalsByPortalIDFormsEmployeePutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
