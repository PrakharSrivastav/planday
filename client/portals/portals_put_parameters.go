// Code generated by go-swagger; DO NOT EDIT.

package portals

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPortalsPutParams creates a new PortalsPutParams object
// with the default values initialized.
func NewPortalsPutParams() *PortalsPutParams {
	var ()
	return &PortalsPutParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPortalsPutParamsWithTimeout creates a new PortalsPutParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPortalsPutParamsWithTimeout(timeout time.Duration) *PortalsPutParams {
	var ()
	return &PortalsPutParams{

		timeout: timeout,
	}
}

// NewPortalsPutParamsWithContext creates a new PortalsPutParams object
// with the default values initialized, and the ability to set a context for a request
func NewPortalsPutParamsWithContext(ctx context.Context) *PortalsPutParams {
	var ()
	return &PortalsPutParams{

		Context: ctx,
	}
}

// NewPortalsPutParamsWithHTTPClient creates a new PortalsPutParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPortalsPutParamsWithHTTPClient(client *http.Client) *PortalsPutParams {
	var ()
	return &PortalsPutParams{
		HTTPClient: client,
	}
}

/*PortalsPutParams contains all the parameters to send to the API endpoint
for the portals put operation typically these are written to a http.Request
*/
type PortalsPutParams struct {

	/*HasPunchclock*/
	HasPunchclock *bool
	/*PaymentAccountID*/
	PaymentAccountID *string
	/*PortalGUID*/
	PortalGUID *strfmt.UUID
	/*Type*/
	Type *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the portals put params
func (o *PortalsPutParams) WithTimeout(timeout time.Duration) *PortalsPutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the portals put params
func (o *PortalsPutParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the portals put params
func (o *PortalsPutParams) WithContext(ctx context.Context) *PortalsPutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the portals put params
func (o *PortalsPutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the portals put params
func (o *PortalsPutParams) WithHTTPClient(client *http.Client) *PortalsPutParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the portals put params
func (o *PortalsPutParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHasPunchclock adds the hasPunchclock to the portals put params
func (o *PortalsPutParams) WithHasPunchclock(hasPunchclock *bool) *PortalsPutParams {
	o.SetHasPunchclock(hasPunchclock)
	return o
}

// SetHasPunchclock adds the hasPunchclock to the portals put params
func (o *PortalsPutParams) SetHasPunchclock(hasPunchclock *bool) {
	o.HasPunchclock = hasPunchclock
}

// WithPaymentAccountID adds the paymentAccountID to the portals put params
func (o *PortalsPutParams) WithPaymentAccountID(paymentAccountID *string) *PortalsPutParams {
	o.SetPaymentAccountID(paymentAccountID)
	return o
}

// SetPaymentAccountID adds the paymentAccountId to the portals put params
func (o *PortalsPutParams) SetPaymentAccountID(paymentAccountID *string) {
	o.PaymentAccountID = paymentAccountID
}

// WithPortalGUID adds the portalGUID to the portals put params
func (o *PortalsPutParams) WithPortalGUID(portalGUID *strfmt.UUID) *PortalsPutParams {
	o.SetPortalGUID(portalGUID)
	return o
}

// SetPortalGUID adds the portalGuid to the portals put params
func (o *PortalsPutParams) SetPortalGUID(portalGUID *strfmt.UUID) {
	o.PortalGUID = portalGUID
}

// WithType adds the typeVar to the portals put params
func (o *PortalsPutParams) WithType(typeVar *int32) *PortalsPutParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the portals put params
func (o *PortalsPutParams) SetType(typeVar *int32) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *PortalsPutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.HasPunchclock != nil {

		// query param HasPunchclock
		var qrHasPunchclock bool
		if o.HasPunchclock != nil {
			qrHasPunchclock = *o.HasPunchclock
		}
		qHasPunchclock := swag.FormatBool(qrHasPunchclock)
		if qHasPunchclock != "" {
			if err := r.SetQueryParam("HasPunchclock", qHasPunchclock); err != nil {
				return err
			}
		}

	}

	if o.PaymentAccountID != nil {

		// query param PaymentAccountId
		var qrPaymentAccountID string
		if o.PaymentAccountID != nil {
			qrPaymentAccountID = *o.PaymentAccountID
		}
		qPaymentAccountID := qrPaymentAccountID
		if qPaymentAccountID != "" {
			if err := r.SetQueryParam("PaymentAccountId", qPaymentAccountID); err != nil {
				return err
			}
		}

	}

	if o.PortalGUID != nil {

		// query param PortalGuid
		var qrPortalGUID strfmt.UUID
		if o.PortalGUID != nil {
			qrPortalGUID = *o.PortalGUID
		}
		qPortalGUID := qrPortalGUID.String()
		if qPortalGUID != "" {
			if err := r.SetQueryParam("PortalGuid", qPortalGUID); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param Type
		var qrType int32
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := swag.FormatInt32(qrType)
		if qType != "" {
			if err := r.SetQueryParam("Type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
