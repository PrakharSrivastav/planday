// Code generated by go-swagger; DO NOT EDIT.

package profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new profile API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for profile API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ProfileForgotPasswordPost profile forgot password post API
*/
func (a *Client) ProfileForgotPasswordPost(params *ProfileForgotPasswordPostParams, authInfo runtime.ClientAuthInfoWriter) (*ProfileForgotPasswordPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfileForgotPasswordPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProfileForgot_passwordPost",
		Method:             "POST",
		PathPattern:        "/profile/forgot_password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProfileForgotPasswordPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProfileForgotPasswordPostOK), nil

}

/*
ProfileGet returns the current user profile defined by user token
*/
func (a *Client) ProfileGet(params *ProfileGetParams, authInfo runtime.ClientAuthInfoWriter) (*ProfileGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfileGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProfileGet",
		Method:             "GET",
		PathPattern:        "/profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProfileGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProfileGetOK), nil

}

/*
ProfilePost updates current user s profile preferences and or personal details
*/
func (a *Client) ProfilePost(params *ProfilePostParams, authInfo runtime.ClientAuthInfoWriter) (*ProfilePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProfilePost",
		Method:             "POST",
		PathPattern:        "/profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProfilePostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProfilePostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
