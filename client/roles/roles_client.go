// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new roles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for roles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
RolesByIDDelete roles by Id delete API
*/
func (a *Client) RolesByIDDelete(params *RolesByIDDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRolesByIDDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RolesByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/roles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RolesByIDDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
RolesByIDGet roles by Id get API
*/
func (a *Client) RolesByIDGet(params *RolesByIDGetParams, authInfo runtime.ClientAuthInfoWriter) (*RolesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRolesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RolesByIdGet",
		Method:             "GET",
		PathPattern:        "/roles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RolesByIDGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RolesByIDGetOK), nil

}

/*
RolesByIDPut roles by Id put API
*/
func (a *Client) RolesByIDPut(params *RolesByIDPutParams, authInfo runtime.ClientAuthInfoWriter) (*RolesByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRolesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RolesByIdPut",
		Method:             "PUT",
		PathPattern:        "/roles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RolesByIDPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RolesByIDPutOK), nil

}

/*
RolesGet roles get API
*/
func (a *Client) RolesGet(params *RolesGetParams, authInfo runtime.ClientAuthInfoWriter) (*RolesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRolesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RolesGet",
		Method:             "GET",
		PathPattern:        "/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RolesGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RolesGetOK), nil

}

/*
RolesPost roles post API
*/
func (a *Client) RolesPost(params *RolesPostParams, authInfo runtime.ClientAuthInfoWriter) (*RolesPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRolesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RolesPost",
		Method:             "POST",
		PathPattern:        "/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RolesPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RolesPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
