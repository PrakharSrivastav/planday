// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRolesGetParams creates a new RolesGetParams object
// with the default values initialized.
func NewRolesGetParams() *RolesGetParams {
	var ()
	return &RolesGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRolesGetParamsWithTimeout creates a new RolesGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRolesGetParamsWithTimeout(timeout time.Duration) *RolesGetParams {
	var ()
	return &RolesGetParams{

		timeout: timeout,
	}
}

// NewRolesGetParamsWithContext creates a new RolesGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewRolesGetParamsWithContext(ctx context.Context) *RolesGetParams {
	var ()
	return &RolesGetParams{

		Context: ctx,
	}
}

// NewRolesGetParamsWithHTTPClient creates a new RolesGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRolesGetParamsWithHTTPClient(client *http.Client) *RolesGetParams {
	var ()
	return &RolesGetParams{
		HTTPClient: client,
	}
}

/*RolesGetParams contains all the parameters to send to the API endpoint
for the roles get operation typically these are written to a http.Request
*/
type RolesGetParams struct {

	/*DepartmentID*/
	DepartmentID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the roles get params
func (o *RolesGetParams) WithTimeout(timeout time.Duration) *RolesGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the roles get params
func (o *RolesGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the roles get params
func (o *RolesGetParams) WithContext(ctx context.Context) *RolesGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the roles get params
func (o *RolesGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the roles get params
func (o *RolesGetParams) WithHTTPClient(client *http.Client) *RolesGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the roles get params
func (o *RolesGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDepartmentID adds the departmentID to the roles get params
func (o *RolesGetParams) WithDepartmentID(departmentID *int64) *RolesGetParams {
	o.SetDepartmentID(departmentID)
	return o
}

// SetDepartmentID adds the departmentId to the roles get params
func (o *RolesGetParams) SetDepartmentID(departmentID *int64) {
	o.DepartmentID = departmentID
}

// WriteToRequest writes these params to a swagger request
func (o *RolesGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DepartmentID != nil {

		// query param department_id
		var qrDepartmentID int64
		if o.DepartmentID != nil {
			qrDepartmentID = *o.DepartmentID
		}
		qDepartmentID := swag.FormatInt64(qrDepartmentID)
		if qDepartmentID != "" {
			if err := r.SetQueryParam("department_id", qDepartmentID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
