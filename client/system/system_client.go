// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new system API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
SecurityGroupsGet returns the list of all the security groups available to current user
*/
func (a *Client) SecurityGroupsGet(params *SecurityGroupsGetParams, authInfo runtime.ClientAuthInfoWriter) (*SecurityGroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityGroupsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Security_groupsGet",
		Method:             "GET",
		PathPattern:        "/security_groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SecurityGroupsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SecurityGroupsGetOK), nil

}

/*
SystemErrorsGet gets the list of all the domain exceptions defined in the system
*/
func (a *Client) SystemErrorsGet(params *SystemErrorsGetParams, authInfo runtime.ClientAuthInfoWriter) (*SystemErrorsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemErrorsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SystemErrorsGet",
		Method:             "GET",
		PathPattern:        "/system/errors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SystemErrorsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SystemErrorsGetOK), nil

}

/*
SystemPhonePrefixesGet gets the list of phone prefixes in the system
*/
func (a *Client) SystemPhonePrefixesGet(params *SystemPhonePrefixesGetParams, authInfo runtime.ClientAuthInfoWriter) (*SystemPhonePrefixesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemPhonePrefixesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SystemPhone_prefixesGet",
		Method:             "GET",
		PathPattern:        "/system/phone_prefixes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SystemPhonePrefixesGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SystemPhonePrefixesGetOK), nil

}

/*
SystemSubdivisionsGet gets the list of country subdivisions in the system
*/
func (a *Client) SystemSubdivisionsGet(params *SystemSubdivisionsGetParams, authInfo runtime.ClientAuthInfoWriter) (*SystemSubdivisionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemSubdivisionsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SystemSubdivisionsGet",
		Method:             "GET",
		PathPattern:        "/system/subdivisions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SystemSubdivisionsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SystemSubdivisionsGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
