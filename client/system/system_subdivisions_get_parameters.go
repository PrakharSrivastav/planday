// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSystemSubdivisionsGetParams creates a new SystemSubdivisionsGetParams object
// with the default values initialized.
func NewSystemSubdivisionsGetParams() *SystemSubdivisionsGetParams {
	var ()
	return &SystemSubdivisionsGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSystemSubdivisionsGetParamsWithTimeout creates a new SystemSubdivisionsGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSystemSubdivisionsGetParamsWithTimeout(timeout time.Duration) *SystemSubdivisionsGetParams {
	var ()
	return &SystemSubdivisionsGetParams{

		timeout: timeout,
	}
}

// NewSystemSubdivisionsGetParamsWithContext creates a new SystemSubdivisionsGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewSystemSubdivisionsGetParamsWithContext(ctx context.Context) *SystemSubdivisionsGetParams {
	var ()
	return &SystemSubdivisionsGetParams{

		Context: ctx,
	}
}

// NewSystemSubdivisionsGetParamsWithHTTPClient creates a new SystemSubdivisionsGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSystemSubdivisionsGetParamsWithHTTPClient(client *http.Client) *SystemSubdivisionsGetParams {
	var ()
	return &SystemSubdivisionsGetParams{
		HTTPClient: client,
	}
}

/*SystemSubdivisionsGetParams contains all the parameters to send to the API endpoint
for the system subdivisions get operation typically these are written to a http.Request
*/
type SystemSubdivisionsGetParams struct {

	/*CountryID*/
	CountryID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the system subdivisions get params
func (o *SystemSubdivisionsGetParams) WithTimeout(timeout time.Duration) *SystemSubdivisionsGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the system subdivisions get params
func (o *SystemSubdivisionsGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the system subdivisions get params
func (o *SystemSubdivisionsGetParams) WithContext(ctx context.Context) *SystemSubdivisionsGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the system subdivisions get params
func (o *SystemSubdivisionsGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the system subdivisions get params
func (o *SystemSubdivisionsGetParams) WithHTTPClient(client *http.Client) *SystemSubdivisionsGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the system subdivisions get params
func (o *SystemSubdivisionsGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCountryID adds the countryID to the system subdivisions get params
func (o *SystemSubdivisionsGetParams) WithCountryID(countryID *int64) *SystemSubdivisionsGetParams {
	o.SetCountryID(countryID)
	return o
}

// SetCountryID adds the countryId to the system subdivisions get params
func (o *SystemSubdivisionsGetParams) SetCountryID(countryID *int64) {
	o.CountryID = countryID
}

// WriteToRequest writes these params to a swagger request
func (o *SystemSubdivisionsGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CountryID != nil {

		// query param country_id
		var qrCountryID int64
		if o.CountryID != nil {
			qrCountryID = *o.CountryID
		}
		qCountryID := swag.FormatInt64(qrCountryID)
		if qCountryID != "" {
			if err := r.SetQueryParam("country_id", qCountryID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
