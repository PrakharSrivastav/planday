// Code generated by go-swagger; DO NOT EDIT.

package translations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewTranslationsGetParams creates a new TranslationsGetParams object
// with the default values initialized.
func NewTranslationsGetParams() *TranslationsGetParams {
	var ()
	return &TranslationsGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTranslationsGetParamsWithTimeout creates a new TranslationsGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTranslationsGetParamsWithTimeout(timeout time.Duration) *TranslationsGetParams {
	var ()
	return &TranslationsGetParams{

		timeout: timeout,
	}
}

// NewTranslationsGetParamsWithContext creates a new TranslationsGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewTranslationsGetParamsWithContext(ctx context.Context) *TranslationsGetParams {
	var ()
	return &TranslationsGetParams{

		Context: ctx,
	}
}

// NewTranslationsGetParamsWithHTTPClient creates a new TranslationsGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTranslationsGetParamsWithHTTPClient(client *http.Client) *TranslationsGetParams {
	var ()
	return &TranslationsGetParams{
		HTTPClient: client,
	}
}

/*TranslationsGetParams contains all the parameters to send to the API endpoint
for the translations get operation typically these are written to a http.Request
*/
type TranslationsGetParams struct {

	/*Categories*/
	Categories *string
	/*Culture*/
	Culture *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the translations get params
func (o *TranslationsGetParams) WithTimeout(timeout time.Duration) *TranslationsGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the translations get params
func (o *TranslationsGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the translations get params
func (o *TranslationsGetParams) WithContext(ctx context.Context) *TranslationsGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the translations get params
func (o *TranslationsGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the translations get params
func (o *TranslationsGetParams) WithHTTPClient(client *http.Client) *TranslationsGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the translations get params
func (o *TranslationsGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategories adds the categories to the translations get params
func (o *TranslationsGetParams) WithCategories(categories *string) *TranslationsGetParams {
	o.SetCategories(categories)
	return o
}

// SetCategories adds the categories to the translations get params
func (o *TranslationsGetParams) SetCategories(categories *string) {
	o.Categories = categories
}

// WithCulture adds the culture to the translations get params
func (o *TranslationsGetParams) WithCulture(culture *string) *TranslationsGetParams {
	o.SetCulture(culture)
	return o
}

// SetCulture adds the culture to the translations get params
func (o *TranslationsGetParams) SetCulture(culture *string) {
	o.Culture = culture
}

// WriteToRequest writes these params to a swagger request
func (o *TranslationsGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Categories != nil {

		// query param categories
		var qrCategories string
		if o.Categories != nil {
			qrCategories = *o.Categories
		}
		qCategories := qrCategories
		if qCategories != "" {
			if err := r.SetQueryParam("categories", qCategories); err != nil {
				return err
			}
		}

	}

	if o.Culture != nil {

		// query param culture
		var qrCulture string
		if o.Culture != nil {
			qrCulture = *o.Culture
		}
		qCulture := qrCulture
		if qCulture != "" {
			if err := r.SetQueryParam("culture", qCulture); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
