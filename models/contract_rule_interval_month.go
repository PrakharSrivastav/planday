// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContractRuleIntervalMonth contract rule interval month
// swagger:model ContractRuleIntervalMonth
type ContractRuleIntervalMonth struct {

	// duration
	Duration string `json:"duration,omitempty"`

	// month
	// Enum: [January February March April May June July August September October November December]
	Month string `json:"month,omitempty"`
}

// Validate validates this contract rule interval month
func (m *ContractRuleIntervalMonth) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMonth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var contractRuleIntervalMonthTypeMonthPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["January","February","March","April","May","June","July","August","September","October","November","December"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contractRuleIntervalMonthTypeMonthPropEnum = append(contractRuleIntervalMonthTypeMonthPropEnum, v)
	}
}

const (

	// ContractRuleIntervalMonthMonthJanuary captures enum value "January"
	ContractRuleIntervalMonthMonthJanuary string = "January"

	// ContractRuleIntervalMonthMonthFebruary captures enum value "February"
	ContractRuleIntervalMonthMonthFebruary string = "February"

	// ContractRuleIntervalMonthMonthMarch captures enum value "March"
	ContractRuleIntervalMonthMonthMarch string = "March"

	// ContractRuleIntervalMonthMonthApril captures enum value "April"
	ContractRuleIntervalMonthMonthApril string = "April"

	// ContractRuleIntervalMonthMonthMay captures enum value "May"
	ContractRuleIntervalMonthMonthMay string = "May"

	// ContractRuleIntervalMonthMonthJune captures enum value "June"
	ContractRuleIntervalMonthMonthJune string = "June"

	// ContractRuleIntervalMonthMonthJuly captures enum value "July"
	ContractRuleIntervalMonthMonthJuly string = "July"

	// ContractRuleIntervalMonthMonthAugust captures enum value "August"
	ContractRuleIntervalMonthMonthAugust string = "August"

	// ContractRuleIntervalMonthMonthSeptember captures enum value "September"
	ContractRuleIntervalMonthMonthSeptember string = "September"

	// ContractRuleIntervalMonthMonthOctober captures enum value "October"
	ContractRuleIntervalMonthMonthOctober string = "October"

	// ContractRuleIntervalMonthMonthNovember captures enum value "November"
	ContractRuleIntervalMonthMonthNovember string = "November"

	// ContractRuleIntervalMonthMonthDecember captures enum value "December"
	ContractRuleIntervalMonthMonthDecember string = "December"
)

// prop value enum
func (m *ContractRuleIntervalMonth) validateMonthEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, contractRuleIntervalMonthTypeMonthPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ContractRuleIntervalMonth) validateMonth(formats strfmt.Registry) error {

	if swag.IsZero(m.Month) { // not required
		return nil
	}

	// value enum
	if err := m.validateMonthEnum("month", "body", m.Month); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContractRuleIntervalMonth) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContractRuleIntervalMonth) UnmarshalBinary(b []byte) error {
	var res ContractRuleIntervalMonth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
