// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContractRulesIntervalViewModel contract rules interval view model
// swagger:model ContractRulesIntervalViewModel
type ContractRulesIntervalViewModel struct {

	// contract rules rule id
	ContractRulesRuleID int64 `json:"contract_rules_rule_id,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// exclude bank
	ExcludeBank bool `json:"exclude_bank,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// include warnings
	IncludeWarnings bool `json:"include_warnings,omitempty"`

	// interval length
	IntervalLength int32 `json:"interval_length,omitempty"`

	// is primary
	IsPrimary bool `json:"is_primary,omitempty"`

	// months
	Months []*ContractRuleIntervalMonth `json:"months"`

	// number of weeks
	NumberOfWeeks int32 `json:"number_of_weeks,omitempty"`

	// start date
	// Format: date-time
	StartDate strfmt.DateTime `json:"start_date,omitempty"`

	// total duration
	TotalDuration string `json:"total_duration,omitempty"`

	// total hours
	TotalHours int32 `json:"total_hours,omitempty"`

	// type
	// Enum: [Weekly Monthly Annual Months]
	Type string `json:"type,omitempty"`
}

// Validate validates this contract rules interval view model
func (m *ContractRulesIntervalViewModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMonths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContractRulesIntervalViewModel) validateMonths(formats strfmt.Registry) error {

	if swag.IsZero(m.Months) { // not required
		return nil
	}

	for i := 0; i < len(m.Months); i++ {
		if swag.IsZero(m.Months[i]) { // not required
			continue
		}

		if m.Months[i] != nil {
			if err := m.Months[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("months" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ContractRulesIntervalViewModel) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("start_date", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var contractRulesIntervalViewModelTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Weekly","Monthly","Annual","Months"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contractRulesIntervalViewModelTypeTypePropEnum = append(contractRulesIntervalViewModelTypeTypePropEnum, v)
	}
}

const (

	// ContractRulesIntervalViewModelTypeWeekly captures enum value "Weekly"
	ContractRulesIntervalViewModelTypeWeekly string = "Weekly"

	// ContractRulesIntervalViewModelTypeMonthly captures enum value "Monthly"
	ContractRulesIntervalViewModelTypeMonthly string = "Monthly"

	// ContractRulesIntervalViewModelTypeAnnual captures enum value "Annual"
	ContractRulesIntervalViewModelTypeAnnual string = "Annual"

	// ContractRulesIntervalViewModelTypeMonths captures enum value "Months"
	ContractRulesIntervalViewModelTypeMonths string = "Months"
)

// prop value enum
func (m *ContractRulesIntervalViewModel) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, contractRulesIntervalViewModelTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ContractRulesIntervalViewModel) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContractRulesIntervalViewModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContractRulesIntervalViewModel) UnmarshalBinary(b []byte) error {
	var res ContractRulesIntervalViewModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
