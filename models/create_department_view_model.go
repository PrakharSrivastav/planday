// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateDepartmentViewModel create department view model
// swagger:model CreateDepartmentViewModel
type CreateDepartmentViewModel struct {

	// address1
	// Max Length: 250
	// Min Length: 0
	Address1 *string `json:"address1,omitempty"`

	// address2
	// Max Length: 250
	// Min Length: 0
	Address2 *string `json:"address2,omitempty"`

	// city
	// Max Length: 250
	// Min Length: 0
	City *string `json:"city,omitempty"`

	// country id
	CountryID int64 `json:"country_id,omitempty"`

	// county
	// Max Length: 250
	// Min Length: 0
	County *string `json:"county,omitempty"`

	// description
	// Max Length: 2000
	// Min Length: 0
	Description *string `json:"description,omitempty"`

	// employees
	// Unique: true
	Employees []int64 `json:"employees"`

	// name
	// Required: true
	// Max Length: 250
	// Min Length: 0
	Name *string `json:"name"`

	// phone
	// Max Length: 50
	// Min Length: 0
	Phone *string `json:"phone,omitempty"`

	// zip
	// Max Length: 50
	// Min Length: 0
	Zip *string `json:"zip,omitempty"`
}

// Validate validates this create department view model
func (m *CreateDepartmentViewModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCounty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmployees(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZip(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateDepartmentViewModel) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(m.Address1) { // not required
		return nil
	}

	if err := validate.MinLength("address1", "body", string(*m.Address1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("address1", "body", string(*m.Address1), 250); err != nil {
		return err
	}

	return nil
}

func (m *CreateDepartmentViewModel) validateAddress2(formats strfmt.Registry) error {

	if swag.IsZero(m.Address2) { // not required
		return nil
	}

	if err := validate.MinLength("address2", "body", string(*m.Address2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("address2", "body", string(*m.Address2), 250); err != nil {
		return err
	}

	return nil
}

func (m *CreateDepartmentViewModel) validateCity(formats strfmt.Registry) error {

	if swag.IsZero(m.City) { // not required
		return nil
	}

	if err := validate.MinLength("city", "body", string(*m.City), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("city", "body", string(*m.City), 250); err != nil {
		return err
	}

	return nil
}

func (m *CreateDepartmentViewModel) validateCounty(formats strfmt.Registry) error {

	if swag.IsZero(m.County) { // not required
		return nil
	}

	if err := validate.MinLength("county", "body", string(*m.County), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("county", "body", string(*m.County), 250); err != nil {
		return err
	}

	return nil
}

func (m *CreateDepartmentViewModel) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(*m.Description), 2000); err != nil {
		return err
	}

	return nil
}

func (m *CreateDepartmentViewModel) validateEmployees(formats strfmt.Registry) error {

	if swag.IsZero(m.Employees) { // not required
		return nil
	}

	if err := validate.UniqueItems("employees", "body", m.Employees); err != nil {
		return err
	}

	return nil
}

func (m *CreateDepartmentViewModel) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 250); err != nil {
		return err
	}

	return nil
}

func (m *CreateDepartmentViewModel) validatePhone(formats strfmt.Registry) error {

	if swag.IsZero(m.Phone) { // not required
		return nil
	}

	if err := validate.MinLength("phone", "body", string(*m.Phone), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("phone", "body", string(*m.Phone), 50); err != nil {
		return err
	}

	return nil
}

func (m *CreateDepartmentViewModel) validateZip(formats strfmt.Registry) error {

	if swag.IsZero(m.Zip) { // not required
		return nil
	}

	if err := validate.MinLength("zip", "body", string(*m.Zip), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("zip", "body", string(*m.Zip), 50); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateDepartmentViewModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateDepartmentViewModel) UnmarshalBinary(b []byte) error {
	var res CreateDepartmentViewModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
