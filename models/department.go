// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Department department
// swagger:model Department
type Department struct {

	// break mode
	// Read Only: true
	// Enum: [None Manual Rules]
	BreakMode string `json:"break_mode,omitempty"`

	// city
	// Read Only: true
	City string `json:"city,omitempty"`

	// country id
	// Read Only: true
	CountryID int64 `json:"country_id,omitempty"`

	// county
	// Read Only: true
	County string `json:"county,omitempty"`

	// created at
	// Read Only: true
	CreatedAt string `json:"created_at,omitempty"`

	// created by
	// Read Only: true
	CreatedBy int64 `json:"created_by,omitempty"`

	// date created
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"date_created,omitempty"`

	// date deleted
	// Read Only: true
	// Format: date-time
	DateDeleted strfmt.DateTime `json:"date_deleted,omitempty"`

	// date modified
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"date_modified,omitempty"`

	// deleted at
	// Read Only: true
	DeletedAt string `json:"deleted_at,omitempty"`

	// deleted by
	// Read Only: true
	DeletedBy int64 `json:"deleted_by,omitempty"`

	// description
	// Read Only: true
	Description string `json:"description,omitempty"`

	// duty schedule type
	// Read Only: true
	DutyScheduleType int32 `json:"duty_schedule_type,omitempty"`

	// fallback hourly salary
	// Read Only: true
	FallbackHourlySalary float64 `json:"fallback_hourly_salary,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// is deleted
	// Read Only: true
	IsDeleted *bool `json:"is_deleted,omitempty"`

	// last modified
	// Read Only: true
	LastModified string `json:"last_modified,omitempty"`

	// members
	// Read Only: true
	Members []*DepartmentMembership `json:"members"`

	// modified by
	// Read Only: true
	ModifiedBy int64 `json:"modified_by,omitempty"`

	// name
	// Read Only: true
	Name string `json:"name,omitempty"`

	// number
	// Read Only: true
	Number string `json:"number,omitempty"`

	// portal id
	PortalID int64 `json:"portal_id,omitempty"`

	// raised events
	// Read Only: true
	RaisedEvents []*IdomainEvent `json:"raised_events"`

	// sort value
	// Read Only: true
	SortValue int32 `json:"sort_value,omitempty"`

	// street
	// Read Only: true
	Street string `json:"street,omitempty"`

	// street2
	// Read Only: true
	Street2 string `json:"street2,omitempty"`

	// telephone
	// Read Only: true
	Telephone string `json:"telephone,omitempty"`

	// time zone
	TimeZone string `json:"time_zone,omitempty"`

	// time zone id
	// Read Only: true
	TimeZoneID int32 `json:"time_zone_id,omitempty"`

	// work day end minutes
	// Read Only: true
	WorkDayEndMinutes int32 `json:"work_day_end_minutes,omitempty"`

	// work day start minutes
	// Read Only: true
	WorkDayStartMinutes int32 `json:"work_day_start_minutes,omitempty"`

	// zip
	// Read Only: true
	Zip string `json:"zip,omitempty"`
}

// Validate validates this department
func (m *Department) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBreakMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRaisedEvents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var departmentTypeBreakModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Manual","Rules"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		departmentTypeBreakModePropEnum = append(departmentTypeBreakModePropEnum, v)
	}
}

const (

	// DepartmentBreakModeNone captures enum value "None"
	DepartmentBreakModeNone string = "None"

	// DepartmentBreakModeManual captures enum value "Manual"
	DepartmentBreakModeManual string = "Manual"

	// DepartmentBreakModeRules captures enum value "Rules"
	DepartmentBreakModeRules string = "Rules"
)

// prop value enum
func (m *Department) validateBreakModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, departmentTypeBreakModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Department) validateBreakMode(formats strfmt.Registry) error {

	if swag.IsZero(m.BreakMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateBreakModeEnum("break_mode", "body", m.BreakMode); err != nil {
		return err
	}

	return nil
}

func (m *Department) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("date_created", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Department) validateDateDeleted(formats strfmt.Registry) error {

	if swag.IsZero(m.DateDeleted) { // not required
		return nil
	}

	if err := validate.FormatOf("date_deleted", "body", "date-time", m.DateDeleted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Department) validateDateModified(formats strfmt.Registry) error {

	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("date_modified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Department) validateMembers(formats strfmt.Registry) error {

	if swag.IsZero(m.Members) { // not required
		return nil
	}

	for i := 0; i < len(m.Members); i++ {
		if swag.IsZero(m.Members[i]) { // not required
			continue
		}

		if m.Members[i] != nil {
			if err := m.Members[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Department) validateRaisedEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.RaisedEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.RaisedEvents); i++ {
		if swag.IsZero(m.RaisedEvents[i]) { // not required
			continue
		}

		if m.RaisedEvents[i] != nil {
			if err := m.RaisedEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("raised_events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Department) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Department) UnmarshalBinary(b []byte) error {
	var res Department
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
