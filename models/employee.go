// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Employee employee
// swagger:model Employee
type Employee struct {

	// attachments
	Attachments []*EmployeeAttachment `json:"attachments"`

	// avatar id
	AvatarID int64 `json:"avatar_id,omitempty"`

	// bank account
	// Max Length: 50
	// Min Length: 0
	BankAccount *string `json:"bank_account,omitempty"`

	// bank reg number
	// Max Length: 50
	// Min Length: 0
	BankRegNumber *string `json:"bank_reg_number,omitempty"`

	// birth date
	BirthDate string `json:"birth_date,omitempty"`

	// birthday
	// Format: date-time
	Birthday strfmt.DateTime `json:"birthday,omitempty"`

	// cell phone
	// Max Length: 50
	// Min Length: 0
	CellPhone *string `json:"cell_phone,omitempty"`

	// cell phone country
	CellPhoneCountry *Country `json:"cell_phone_country,omitempty"`

	// cell phone country id
	CellPhoneCountryID int64 `json:"cell_phone_country_id,omitempty"`

	// city
	City string `json:"city,omitempty"`

	// contract rules rule id
	ContractRulesRuleID int64 `json:"contract_rules_rule_id,omitempty"`

	// country id
	CountryID int64 `json:"country_id,omitempty"`

	// created at
	// Read Only: true
	CreatedAt string `json:"created_at,omitempty"`

	// created by
	// Read Only: true
	CreatedBy int64 `json:"created_by,omitempty"`

	// custom property attachment values
	CustomPropertyAttachmentValues []*CustomPropertyAttachmentValue `json:"custom_property_attachment_values"`

	// custom property values
	CustomPropertyValues []*CustomPropertyValue `json:"custom_property_values"`

	// date created
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"date_created,omitempty"`

	// date deleted
	// Read Only: true
	// Format: date-time
	DateDeleted strfmt.DateTime `json:"date_deleted,omitempty"`

	// date global news read
	// Format: date-time
	DateGlobalNewsRead strfmt.DateTime `json:"date_global_news_read,omitempty"`

	// date modified
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"date_modified,omitempty"`

	// deactivation date
	DeactivationDate string `json:"deactivation_date,omitempty"`

	// delete origin
	// Enum: [Instant Marked]
	DeleteOrigin string `json:"delete_origin,omitempty"`

	// deleted at
	// Read Only: true
	DeletedAt string `json:"deleted_at,omitempty"`

	// deleted by
	// Read Only: true
	DeletedBy int64 `json:"deleted_by,omitempty"`

	// department memberships
	// Read Only: true
	DepartmentMemberships []*DepartmentMembership `json:"department_memberships"`

	// description
	Description string `json:"description,omitempty"`

	// disko web id
	DiskoWebID int32 `json:"disko_web_id,omitempty"`

	// dismissed date time date utc
	// Format: date-time
	DismissedDateTimeDateUtc strfmt.DateTime `json:"dismissed_date_time_date_utc,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// employee buy balance
	EmployeeBuyBalance float64 `json:"employee_buy_balance,omitempty"`

	// employee group memberships
	EmployeeGroupMemberships []*EmployeeGroupMembership `json:"employee_group_memberships"`

	// employee type id
	EmployeeTypeID int64 `json:"employee_type_id,omitempty"`

	// first name
	FirstName string `json:"first_name,omitempty"`

	// gender
	// Read Only: true
	// Enum: [Male Female]
	Gender string `json:"gender,omitempty"`

	// hired date
	// Format: date-time
	HiredDate strfmt.DateTime `json:"hired_date,omitempty"`

	// hired from
	HiredFrom string `json:"hired_from,omitempty"`

	// hourly base wage
	HourlyBaseWage float64 `json:"hourly_base_wage,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// initials
	// Max Length: 50
	// Min Length: 0
	Initials *string `json:"initials,omitempty"`

	// is deleted
	// Read Only: true
	IsDeleted *bool `json:"is_deleted,omitempty"`

	// is dismissed
	// Read Only: true
	IsDismissed *bool `json:"is_dismissed,omitempty"`

	// is email notify
	IsEmailNotify bool `json:"is_email_notify,omitempty"`

	// is forgotten
	IsForgotten bool `json:"is_forgotten,omitempty"`

	// is male
	IsMale bool `json:"is_male,omitempty"`

	// is public
	IsPublic bool `json:"is_public,omitempty"`

	// is super user
	IsSuperUser bool `json:"is_super_user,omitempty"`

	// job title
	// Max Length: 250
	// Min Length: 0
	JobTitle *string `json:"job_title,omitempty"`

	// language
	Language *Language `json:"language,omitempty"`

	// language id
	LanguageID int64 `json:"language_id,omitempty"`

	// last modified
	// Read Only: true
	LastModified string `json:"last_modified,omitempty"`

	// last name
	LastName string `json:"last_name,omitempty"`

	// lieu over time balance
	LieuOverTimeBalance float64 `json:"lieu_over_time_balance,omitempty"`

	// m s n
	// Max Length: 250
	// Min Length: 0
	MSN *string `json:"m_s_n,omitempty"`

	// max access priority
	// Read Only: true
	MaxAccessPriority int32 `json:"max_access_priority,omitempty"`

	// middle name
	// Max Length: 250
	// Min Length: 0
	MiddleName *string `json:"middle_name,omitempty"`

	// modified by
	// Read Only: true
	ModifiedBy int64 `json:"modified_by,omitempty"`

	// name
	// Read Only: true
	Name string `json:"name,omitempty"`

	// nick name
	// Max Length: 250
	// Min Length: 0
	NickName *string `json:"nick_name,omitempty"`

	// pause category id
	PauseCategoryID int64 `json:"pause_category_id,omitempty"`

	// phone
	// Max Length: 50
	// Min Length: 0
	Phone *string `json:"phone,omitempty"`

	// phone country
	PhoneCountry *Country `json:"phone_country,omitempty"`

	// phone country id
	PhoneCountryID int64 `json:"phone_country_id,omitempty"`

	// portal memberships
	PortalMemberships []*PortalMembership `json:"portal_memberships"`

	// previous user name
	PreviousUserName string `json:"previous_user_name,omitempty"`

	// primary department id
	PrimaryDepartmentID int64 `json:"primary_department_id,omitempty"`

	// profile image
	ProfileImage string `json:"profile_image,omitempty"`

	// profile image thumb
	// Format: byte
	ProfileImageThumb strfmt.Base64 `json:"profile_image_thumb,omitempty"`

	// raised events
	// Read Only: true
	RaisedEvents []*IdomainEvent `json:"raised_events"`

	// receive diet supplement
	ReceiveDietSupplement bool `json:"receive_diet_supplement,omitempty"`

	// receive notification mail
	ReceiveNotificationMail bool `json:"receive_notification_mail,omitempty"`

	// s s n
	SSN string `json:"s_s_n,omitempty"`

	// salary identifier
	SalaryIdentifier string `json:"salary_identifier,omitempty"`

	// security group memberships
	SecurityGroupMemberships []*SecurityGroupMembership `json:"security_group_memberships"`

	// state
	// Max Length: 250
	// Min Length: 0
	State *string `json:"state,omitempty"`

	// street1
	// Max Length: 250
	// Min Length: 0
	Street1 *string `json:"street1,omitempty"`

	// street2
	// Max Length: 250
	// Min Length: 0
	Street2 *string `json:"street2,omitempty"`

	// subdivision id
	SubdivisionID int64 `json:"subdivision_id,omitempty"`

	// time zone
	TimeZone string `json:"time_zone,omitempty"`

	// time zone id
	// Read Only: true
	TimeZoneID int32 `json:"time_zone_id,omitempty"`

	// user
	User *User `json:"user,omitempty"`

	// website
	// Max Length: 250
	// Min Length: 0
	Website *string `json:"website,omitempty"`

	// work hours
	WorkHours float64 `json:"work_hours,omitempty"`

	// work hours week
	WorkHoursWeek float64 `json:"work_hours_week,omitempty"`

	// zip
	Zip string `json:"zip,omitempty"`
}

// Validate validates this employee
func (m *Employee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankRegNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBirthday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCellPhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCellPhoneCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomPropertyAttachmentValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomPropertyValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateGlobalNewsRead(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteOrigin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepartmentMemberships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDismissedDateTimeDateUtc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmployeeGroupMemberships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHiredDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMSN(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiddleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNickName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortalMemberships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfileImageThumb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRaisedEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityGroupMemberships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreet1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreet2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebsite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Employee) validateAttachments(formats strfmt.Registry) error {

	if swag.IsZero(m.Attachments) { // not required
		return nil
	}

	for i := 0; i < len(m.Attachments); i++ {
		if swag.IsZero(m.Attachments[i]) { // not required
			continue
		}

		if m.Attachments[i] != nil {
			if err := m.Attachments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Employee) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.BankAccount) { // not required
		return nil
	}

	if err := validate.MinLength("bank_account", "body", string(*m.BankAccount), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bank_account", "body", string(*m.BankAccount), 50); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validateBankRegNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.BankRegNumber) { // not required
		return nil
	}

	if err := validate.MinLength("bank_reg_number", "body", string(*m.BankRegNumber), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bank_reg_number", "body", string(*m.BankRegNumber), 50); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validateBirthday(formats strfmt.Registry) error {

	if swag.IsZero(m.Birthday) { // not required
		return nil
	}

	if err := validate.FormatOf("birthday", "body", "date-time", m.Birthday.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validateCellPhone(formats strfmt.Registry) error {

	if swag.IsZero(m.CellPhone) { // not required
		return nil
	}

	if err := validate.MinLength("cell_phone", "body", string(*m.CellPhone), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cell_phone", "body", string(*m.CellPhone), 50); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validateCellPhoneCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.CellPhoneCountry) { // not required
		return nil
	}

	if m.CellPhoneCountry != nil {
		if err := m.CellPhoneCountry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cell_phone_country")
			}
			return err
		}
	}

	return nil
}

func (m *Employee) validateCustomPropertyAttachmentValues(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomPropertyAttachmentValues) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomPropertyAttachmentValues); i++ {
		if swag.IsZero(m.CustomPropertyAttachmentValues[i]) { // not required
			continue
		}

		if m.CustomPropertyAttachmentValues[i] != nil {
			if err := m.CustomPropertyAttachmentValues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("custom_property_attachment_values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Employee) validateCustomPropertyValues(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomPropertyValues) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomPropertyValues); i++ {
		if swag.IsZero(m.CustomPropertyValues[i]) { // not required
			continue
		}

		if m.CustomPropertyValues[i] != nil {
			if err := m.CustomPropertyValues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("custom_property_values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Employee) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("date_created", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validateDateDeleted(formats strfmt.Registry) error {

	if swag.IsZero(m.DateDeleted) { // not required
		return nil
	}

	if err := validate.FormatOf("date_deleted", "body", "date-time", m.DateDeleted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validateDateGlobalNewsRead(formats strfmt.Registry) error {

	if swag.IsZero(m.DateGlobalNewsRead) { // not required
		return nil
	}

	if err := validate.FormatOf("date_global_news_read", "body", "date-time", m.DateGlobalNewsRead.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validateDateModified(formats strfmt.Registry) error {

	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("date_modified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

var employeeTypeDeleteOriginPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Instant","Marked"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		employeeTypeDeleteOriginPropEnum = append(employeeTypeDeleteOriginPropEnum, v)
	}
}

const (

	// EmployeeDeleteOriginInstant captures enum value "Instant"
	EmployeeDeleteOriginInstant string = "Instant"

	// EmployeeDeleteOriginMarked captures enum value "Marked"
	EmployeeDeleteOriginMarked string = "Marked"
)

// prop value enum
func (m *Employee) validateDeleteOriginEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, employeeTypeDeleteOriginPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Employee) validateDeleteOrigin(formats strfmt.Registry) error {

	if swag.IsZero(m.DeleteOrigin) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeleteOriginEnum("delete_origin", "body", m.DeleteOrigin); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validateDepartmentMemberships(formats strfmt.Registry) error {

	if swag.IsZero(m.DepartmentMemberships) { // not required
		return nil
	}

	for i := 0; i < len(m.DepartmentMemberships); i++ {
		if swag.IsZero(m.DepartmentMemberships[i]) { // not required
			continue
		}

		if m.DepartmentMemberships[i] != nil {
			if err := m.DepartmentMemberships[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("department_memberships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Employee) validateDismissedDateTimeDateUtc(formats strfmt.Registry) error {

	if swag.IsZero(m.DismissedDateTimeDateUtc) { // not required
		return nil
	}

	if err := validate.FormatOf("dismissed_date_time_date_utc", "body", "date-time", m.DismissedDateTimeDateUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validateEmployeeGroupMemberships(formats strfmt.Registry) error {

	if swag.IsZero(m.EmployeeGroupMemberships) { // not required
		return nil
	}

	for i := 0; i < len(m.EmployeeGroupMemberships); i++ {
		if swag.IsZero(m.EmployeeGroupMemberships[i]) { // not required
			continue
		}

		if m.EmployeeGroupMemberships[i] != nil {
			if err := m.EmployeeGroupMemberships[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("employee_group_memberships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var employeeTypeGenderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Male","Female"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		employeeTypeGenderPropEnum = append(employeeTypeGenderPropEnum, v)
	}
}

const (

	// EmployeeGenderMale captures enum value "Male"
	EmployeeGenderMale string = "Male"

	// EmployeeGenderFemale captures enum value "Female"
	EmployeeGenderFemale string = "Female"
)

// prop value enum
func (m *Employee) validateGenderEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, employeeTypeGenderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Employee) validateGender(formats strfmt.Registry) error {

	if swag.IsZero(m.Gender) { // not required
		return nil
	}

	// value enum
	if err := m.validateGenderEnum("gender", "body", m.Gender); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validateHiredDate(formats strfmt.Registry) error {

	if swag.IsZero(m.HiredDate) { // not required
		return nil
	}

	if err := validate.FormatOf("hired_date", "body", "date-time", m.HiredDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validateInitials(formats strfmt.Registry) error {

	if swag.IsZero(m.Initials) { // not required
		return nil
	}

	if err := validate.MinLength("initials", "body", string(*m.Initials), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("initials", "body", string(*m.Initials), 50); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validateJobTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.JobTitle) { // not required
		return nil
	}

	if err := validate.MinLength("job_title", "body", string(*m.JobTitle), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("job_title", "body", string(*m.JobTitle), 250); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validateLanguage(formats strfmt.Registry) error {

	if swag.IsZero(m.Language) { // not required
		return nil
	}

	if m.Language != nil {
		if err := m.Language.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("language")
			}
			return err
		}
	}

	return nil
}

func (m *Employee) validateMSN(formats strfmt.Registry) error {

	if swag.IsZero(m.MSN) { // not required
		return nil
	}

	if err := validate.MinLength("m_s_n", "body", string(*m.MSN), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("m_s_n", "body", string(*m.MSN), 250); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validateMiddleName(formats strfmt.Registry) error {

	if swag.IsZero(m.MiddleName) { // not required
		return nil
	}

	if err := validate.MinLength("middle_name", "body", string(*m.MiddleName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("middle_name", "body", string(*m.MiddleName), 250); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validateNickName(formats strfmt.Registry) error {

	if swag.IsZero(m.NickName) { // not required
		return nil
	}

	if err := validate.MinLength("nick_name", "body", string(*m.NickName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nick_name", "body", string(*m.NickName), 250); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validatePhone(formats strfmt.Registry) error {

	if swag.IsZero(m.Phone) { // not required
		return nil
	}

	if err := validate.MinLength("phone", "body", string(*m.Phone), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("phone", "body", string(*m.Phone), 50); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validatePhoneCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneCountry) { // not required
		return nil
	}

	if m.PhoneCountry != nil {
		if err := m.PhoneCountry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phone_country")
			}
			return err
		}
	}

	return nil
}

func (m *Employee) validatePortalMemberships(formats strfmt.Registry) error {

	if swag.IsZero(m.PortalMemberships) { // not required
		return nil
	}

	for i := 0; i < len(m.PortalMemberships); i++ {
		if swag.IsZero(m.PortalMemberships[i]) { // not required
			continue
		}

		if m.PortalMemberships[i] != nil {
			if err := m.PortalMemberships[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("portal_memberships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Employee) validateProfileImageThumb(formats strfmt.Registry) error {

	if swag.IsZero(m.ProfileImageThumb) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *Employee) validateRaisedEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.RaisedEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.RaisedEvents); i++ {
		if swag.IsZero(m.RaisedEvents[i]) { // not required
			continue
		}

		if m.RaisedEvents[i] != nil {
			if err := m.RaisedEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("raised_events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Employee) validateSecurityGroupMemberships(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityGroupMemberships) { // not required
		return nil
	}

	for i := 0; i < len(m.SecurityGroupMemberships); i++ {
		if swag.IsZero(m.SecurityGroupMemberships[i]) { // not required
			continue
		}

		if m.SecurityGroupMemberships[i] != nil {
			if err := m.SecurityGroupMemberships[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("security_group_memberships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Employee) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := validate.MinLength("state", "body", string(*m.State), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("state", "body", string(*m.State), 250); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validateStreet1(formats strfmt.Registry) error {

	if swag.IsZero(m.Street1) { // not required
		return nil
	}

	if err := validate.MinLength("street1", "body", string(*m.Street1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("street1", "body", string(*m.Street1), 250); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validateStreet2(formats strfmt.Registry) error {

	if swag.IsZero(m.Street2) { // not required
		return nil
	}

	if err := validate.MinLength("street2", "body", string(*m.Street2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("street2", "body", string(*m.Street2), 250); err != nil {
		return err
	}

	return nil
}

func (m *Employee) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

func (m *Employee) validateWebsite(formats strfmt.Registry) error {

	if swag.IsZero(m.Website) { // not required
		return nil
	}

	if err := validate.MinLength("website", "body", string(*m.Website), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("website", "body", string(*m.Website), 250); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Employee) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Employee) UnmarshalBinary(b []byte) error {
	var res Employee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
