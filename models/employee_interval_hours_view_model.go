// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EmployeeIntervalHoursViewModel employee interval hours view model
// swagger:model EmployeeIntervalHoursViewModel
type EmployeeIntervalHoursViewModel struct {

	// contracted hours
	// Read Only: true
	ContractedHours string `json:"contracted_hours,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// deviation hours
	// Read Only: true
	DeviationHours string `json:"deviation_hours,omitempty"`

	// deviation percentage
	// Read Only: true
	DeviationPercentage int64 `json:"deviation_percentage,omitempty"`

	// end date
	EndDate string `json:"end_date,omitempty"`

	// interval duration
	IntervalDuration int64 `json:"interval_duration,omitempty"`

	// interval started
	IntervalStarted bool `json:"interval_started,omitempty"`

	// interval type
	// Enum: [Weekly Monthly Annual Months]
	IntervalType string `json:"interval_type,omitempty"`

	// schedule hours
	// Read Only: true
	ScheduleHours string `json:"schedule_hours,omitempty"`

	// shift type ids
	ShiftTypeIds []int64 `json:"shift_type_ids"`

	// start date
	StartDate string `json:"start_date,omitempty"`
}

// Validate validates this employee interval hours view model
func (m *EmployeeIntervalHoursViewModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIntervalType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var employeeIntervalHoursViewModelTypeIntervalTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Weekly","Monthly","Annual","Months"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		employeeIntervalHoursViewModelTypeIntervalTypePropEnum = append(employeeIntervalHoursViewModelTypeIntervalTypePropEnum, v)
	}
}

const (

	// EmployeeIntervalHoursViewModelIntervalTypeWeekly captures enum value "Weekly"
	EmployeeIntervalHoursViewModelIntervalTypeWeekly string = "Weekly"

	// EmployeeIntervalHoursViewModelIntervalTypeMonthly captures enum value "Monthly"
	EmployeeIntervalHoursViewModelIntervalTypeMonthly string = "Monthly"

	// EmployeeIntervalHoursViewModelIntervalTypeAnnual captures enum value "Annual"
	EmployeeIntervalHoursViewModelIntervalTypeAnnual string = "Annual"

	// EmployeeIntervalHoursViewModelIntervalTypeMonths captures enum value "Months"
	EmployeeIntervalHoursViewModelIntervalTypeMonths string = "Months"
)

// prop value enum
func (m *EmployeeIntervalHoursViewModel) validateIntervalTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, employeeIntervalHoursViewModelTypeIntervalTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EmployeeIntervalHoursViewModel) validateIntervalType(formats strfmt.Registry) error {

	if swag.IsZero(m.IntervalType) { // not required
		return nil
	}

	// value enum
	if err := m.validateIntervalTypeEnum("interval_type", "body", m.IntervalType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EmployeeIntervalHoursViewModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmployeeIntervalHoursViewModel) UnmarshalBinary(b []byte) error {
	var res EmployeeIntervalHoursViewModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
