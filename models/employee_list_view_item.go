// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EmployeeListViewItem employee list view item
// swagger:model EmployeeListViewItem
type EmployeeListViewItem struct {

	// avatar url
	AvatarURL bool `json:"avatar_url,omitempty"`

	// birthday
	Birthday string `json:"birthday,omitempty"`

	// cell phone
	CellPhone string `json:"cell_phone,omitempty"`

	// cell phone country id
	CellPhoneCountryID int64 `json:"cell_phone_country_id,omitempty"`

	// city
	City string `json:"city,omitempty"`

	// date created
	DateCreated string `json:"date_created,omitempty"`

	// date modified
	DateModified string `json:"date_modified,omitempty"`

	// departments
	// Unique: true
	Departments []int64 `json:"departments"`

	// dismissed date
	DismissedDate string `json:"dismissed_date,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// employee groups
	// Unique: true
	EmployeeGroups []int64 `json:"employee_groups"`

	// first name
	FirstName string `json:"first_name,omitempty"`

	// gender
	// Enum: [Male Female]
	Gender string `json:"gender,omitempty"`

	// has avatar
	HasAvatar bool `json:"has_avatar,omitempty"`

	// has been online
	HasBeenOnline bool `json:"has_been_online,omitempty"`

	// hired date
	HiredDate string `json:"hired_date,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// initials
	Initials string `json:"initials,omitempty"`

	// is online
	IsOnline bool `json:"is_online,omitempty"`

	// is public
	IsPublic bool `json:"is_public,omitempty"`

	// last name
	LastName string `json:"last_name,omitempty"`

	// max access priority
	MaxAccessPriority int64 `json:"max_access_priority,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// nick name
	NickName string `json:"nick_name,omitempty"`

	// pay rate
	PayRate float64 `json:"pay_rate,omitempty"`

	// phone
	Phone string `json:"phone,omitempty"`

	// phone country id
	PhoneCountryID int64 `json:"phone_country_id,omitempty"`

	// roles
	// Unique: true
	Roles []int64 `json:"roles"`

	// salary identifier
	SalaryIdentifier string `json:"salary_identifier,omitempty"`

	// social security number
	SocialSecurityNumber string `json:"social_security_number,omitempty"`

	// street1
	Street1 string `json:"street1,omitempty"`

	// time zone
	TimeZone string `json:"time_zone,omitempty"`

	// username
	Username string `json:"username,omitempty"`

	// zip code
	ZipCode string `json:"zip_code,omitempty"`

	// employee list view item
	EmployeeListViewItem map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *EmployeeListViewItem) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// avatar url
		AvatarURL bool `json:"avatar_url,omitempty"`

		// birthday
		Birthday string `json:"birthday,omitempty"`

		// cell phone
		CellPhone string `json:"cell_phone,omitempty"`

		// cell phone country id
		CellPhoneCountryID int64 `json:"cell_phone_country_id,omitempty"`

		// city
		City string `json:"city,omitempty"`

		// date created
		DateCreated string `json:"date_created,omitempty"`

		// date modified
		DateModified string `json:"date_modified,omitempty"`

		// departments
		// Unique: true
		Departments []int64 `json:"departments"`

		// dismissed date
		DismissedDate string `json:"dismissed_date,omitempty"`

		// email
		Email string `json:"email,omitempty"`

		// employee groups
		// Unique: true
		EmployeeGroups []int64 `json:"employee_groups"`

		// first name
		FirstName string `json:"first_name,omitempty"`

		// gender
		// Enum: [Male Female]
		Gender string `json:"gender,omitempty"`

		// has avatar
		HasAvatar bool `json:"has_avatar,omitempty"`

		// has been online
		HasBeenOnline bool `json:"has_been_online,omitempty"`

		// hired date
		HiredDate string `json:"hired_date,omitempty"`

		// id
		ID int64 `json:"id,omitempty"`

		// initials
		Initials string `json:"initials,omitempty"`

		// is online
		IsOnline bool `json:"is_online,omitempty"`

		// is public
		IsPublic bool `json:"is_public,omitempty"`

		// last name
		LastName string `json:"last_name,omitempty"`

		// max access priority
		MaxAccessPriority int64 `json:"max_access_priority,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// nick name
		NickName string `json:"nick_name,omitempty"`

		// pay rate
		PayRate float64 `json:"pay_rate,omitempty"`

		// phone
		Phone string `json:"phone,omitempty"`

		// phone country id
		PhoneCountryID int64 `json:"phone_country_id,omitempty"`

		// roles
		// Unique: true
		Roles []int64 `json:"roles"`

		// salary identifier
		SalaryIdentifier string `json:"salary_identifier,omitempty"`

		// social security number
		SocialSecurityNumber string `json:"social_security_number,omitempty"`

		// street1
		Street1 string `json:"street1,omitempty"`

		// time zone
		TimeZone string `json:"time_zone,omitempty"`

		// username
		Username string `json:"username,omitempty"`

		// zip code
		ZipCode string `json:"zip_code,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv EmployeeListViewItem

	rcv.AvatarURL = stage1.AvatarURL

	rcv.Birthday = stage1.Birthday

	rcv.CellPhone = stage1.CellPhone

	rcv.CellPhoneCountryID = stage1.CellPhoneCountryID

	rcv.City = stage1.City

	rcv.DateCreated = stage1.DateCreated

	rcv.DateModified = stage1.DateModified

	rcv.Departments = stage1.Departments

	rcv.DismissedDate = stage1.DismissedDate

	rcv.Email = stage1.Email

	rcv.EmployeeGroups = stage1.EmployeeGroups

	rcv.FirstName = stage1.FirstName

	rcv.Gender = stage1.Gender

	rcv.HasAvatar = stage1.HasAvatar

	rcv.HasBeenOnline = stage1.HasBeenOnline

	rcv.HiredDate = stage1.HiredDate

	rcv.ID = stage1.ID

	rcv.Initials = stage1.Initials

	rcv.IsOnline = stage1.IsOnline

	rcv.IsPublic = stage1.IsPublic

	rcv.LastName = stage1.LastName

	rcv.MaxAccessPriority = stage1.MaxAccessPriority

	rcv.Name = stage1.Name

	rcv.NickName = stage1.NickName

	rcv.PayRate = stage1.PayRate

	rcv.Phone = stage1.Phone

	rcv.PhoneCountryID = stage1.PhoneCountryID

	rcv.Roles = stage1.Roles

	rcv.SalaryIdentifier = stage1.SalaryIdentifier

	rcv.SocialSecurityNumber = stage1.SocialSecurityNumber

	rcv.Street1 = stage1.Street1

	rcv.TimeZone = stage1.TimeZone

	rcv.Username = stage1.Username

	rcv.ZipCode = stage1.ZipCode

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "avatar_url")

	delete(stage2, "birthday")

	delete(stage2, "cell_phone")

	delete(stage2, "cell_phone_country_id")

	delete(stage2, "city")

	delete(stage2, "date_created")

	delete(stage2, "date_modified")

	delete(stage2, "departments")

	delete(stage2, "dismissed_date")

	delete(stage2, "email")

	delete(stage2, "employee_groups")

	delete(stage2, "first_name")

	delete(stage2, "gender")

	delete(stage2, "has_avatar")

	delete(stage2, "has_been_online")

	delete(stage2, "hired_date")

	delete(stage2, "id")

	delete(stage2, "initials")

	delete(stage2, "is_online")

	delete(stage2, "is_public")

	delete(stage2, "last_name")

	delete(stage2, "max_access_priority")

	delete(stage2, "name")

	delete(stage2, "nick_name")

	delete(stage2, "pay_rate")

	delete(stage2, "phone")

	delete(stage2, "phone_country_id")

	delete(stage2, "roles")

	delete(stage2, "salary_identifier")

	delete(stage2, "social_security_number")

	delete(stage2, "street1")

	delete(stage2, "time_zone")

	delete(stage2, "username")

	delete(stage2, "zip_code")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.EmployeeListViewItem = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m EmployeeListViewItem) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// avatar url
		AvatarURL bool `json:"avatar_url,omitempty"`

		// birthday
		Birthday string `json:"birthday,omitempty"`

		// cell phone
		CellPhone string `json:"cell_phone,omitempty"`

		// cell phone country id
		CellPhoneCountryID int64 `json:"cell_phone_country_id,omitempty"`

		// city
		City string `json:"city,omitempty"`

		// date created
		DateCreated string `json:"date_created,omitempty"`

		// date modified
		DateModified string `json:"date_modified,omitempty"`

		// departments
		// Unique: true
		Departments []int64 `json:"departments"`

		// dismissed date
		DismissedDate string `json:"dismissed_date,omitempty"`

		// email
		Email string `json:"email,omitempty"`

		// employee groups
		// Unique: true
		EmployeeGroups []int64 `json:"employee_groups"`

		// first name
		FirstName string `json:"first_name,omitempty"`

		// gender
		// Enum: [Male Female]
		Gender string `json:"gender,omitempty"`

		// has avatar
		HasAvatar bool `json:"has_avatar,omitempty"`

		// has been online
		HasBeenOnline bool `json:"has_been_online,omitempty"`

		// hired date
		HiredDate string `json:"hired_date,omitempty"`

		// id
		ID int64 `json:"id,omitempty"`

		// initials
		Initials string `json:"initials,omitempty"`

		// is online
		IsOnline bool `json:"is_online,omitempty"`

		// is public
		IsPublic bool `json:"is_public,omitempty"`

		// last name
		LastName string `json:"last_name,omitempty"`

		// max access priority
		MaxAccessPriority int64 `json:"max_access_priority,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// nick name
		NickName string `json:"nick_name,omitempty"`

		// pay rate
		PayRate float64 `json:"pay_rate,omitempty"`

		// phone
		Phone string `json:"phone,omitempty"`

		// phone country id
		PhoneCountryID int64 `json:"phone_country_id,omitempty"`

		// roles
		// Unique: true
		Roles []int64 `json:"roles"`

		// salary identifier
		SalaryIdentifier string `json:"salary_identifier,omitempty"`

		// social security number
		SocialSecurityNumber string `json:"social_security_number,omitempty"`

		// street1
		Street1 string `json:"street1,omitempty"`

		// time zone
		TimeZone string `json:"time_zone,omitempty"`

		// username
		Username string `json:"username,omitempty"`

		// zip code
		ZipCode string `json:"zip_code,omitempty"`
	}

	stage1.AvatarURL = m.AvatarURL

	stage1.Birthday = m.Birthday

	stage1.CellPhone = m.CellPhone

	stage1.CellPhoneCountryID = m.CellPhoneCountryID

	stage1.City = m.City

	stage1.DateCreated = m.DateCreated

	stage1.DateModified = m.DateModified

	stage1.Departments = m.Departments

	stage1.DismissedDate = m.DismissedDate

	stage1.Email = m.Email

	stage1.EmployeeGroups = m.EmployeeGroups

	stage1.FirstName = m.FirstName

	stage1.Gender = m.Gender

	stage1.HasAvatar = m.HasAvatar

	stage1.HasBeenOnline = m.HasBeenOnline

	stage1.HiredDate = m.HiredDate

	stage1.ID = m.ID

	stage1.Initials = m.Initials

	stage1.IsOnline = m.IsOnline

	stage1.IsPublic = m.IsPublic

	stage1.LastName = m.LastName

	stage1.MaxAccessPriority = m.MaxAccessPriority

	stage1.Name = m.Name

	stage1.NickName = m.NickName

	stage1.PayRate = m.PayRate

	stage1.Phone = m.Phone

	stage1.PhoneCountryID = m.PhoneCountryID

	stage1.Roles = m.Roles

	stage1.SalaryIdentifier = m.SalaryIdentifier

	stage1.SocialSecurityNumber = m.SocialSecurityNumber

	stage1.Street1 = m.Street1

	stage1.TimeZone = m.TimeZone

	stage1.Username = m.Username

	stage1.ZipCode = m.ZipCode

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.EmployeeListViewItem) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.EmployeeListViewItem)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this employee list view item
func (m *EmployeeListViewItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDepartments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmployeeGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmployeeListViewItem) validateDepartments(formats strfmt.Registry) error {

	if swag.IsZero(m.Departments) { // not required
		return nil
	}

	if err := validate.UniqueItems("departments", "body", m.Departments); err != nil {
		return err
	}

	return nil
}

func (m *EmployeeListViewItem) validateEmployeeGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.EmployeeGroups) { // not required
		return nil
	}

	if err := validate.UniqueItems("employee_groups", "body", m.EmployeeGroups); err != nil {
		return err
	}

	return nil
}

var employeeListViewItemTypeGenderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Male","Female"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		employeeListViewItemTypeGenderPropEnum = append(employeeListViewItemTypeGenderPropEnum, v)
	}
}

const (

	// EmployeeListViewItemGenderMale captures enum value "Male"
	EmployeeListViewItemGenderMale string = "Male"

	// EmployeeListViewItemGenderFemale captures enum value "Female"
	EmployeeListViewItemGenderFemale string = "Female"
)

// prop value enum
func (m *EmployeeListViewItem) validateGenderEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, employeeListViewItemTypeGenderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EmployeeListViewItem) validateGender(formats strfmt.Registry) error {

	if swag.IsZero(m.Gender) { // not required
		return nil
	}

	// value enum
	if err := m.validateGenderEnum("gender", "body", m.Gender); err != nil {
		return err
	}

	return nil
}

func (m *EmployeeListViewItem) validateRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	if err := validate.UniqueItems("roles", "body", m.Roles); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EmployeeListViewItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmployeeListViewItem) UnmarshalBinary(b []byte) error {
	var res EmployeeListViewItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
