// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FormDefinitionFieldInputModel form definition field input model
// swagger:model FormDefinitionFieldInputModel
type FormDefinitionFieldInputModel struct {

	// archived
	Archived *Archived `json:"archived,omitempty"`

	// default value
	DefaultValue string `json:"default_value,omitempty"`

	// employee can edit
	EmployeeCanEdit bool `json:"employee_can_edit,omitempty"`

	// is unique
	IsUnique bool `json:"is_unique,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// level
	// Enum: [SystemField StandardField CustomField]
	Level string `json:"level,omitempty"`

	// manager can create
	ManagerCanCreate bool `json:"manager_can_create,omitempty"`

	// manager can edit
	ManagerCanEdit bool `json:"manager_can_edit,omitempty"`

	// options
	Options []string `json:"options"`

	// order
	Order int32 `json:"order,omitempty"`

	// property name
	PropertyName string `json:"property_name,omitempty"`

	// required create for manager
	RequiredCreateForManager bool `json:"required_create_for_manager,omitempty"`

	// required edit for manager
	RequiredEditForManager bool `json:"required_edit_for_manager,omitempty"`

	// required for employee
	RequiredForEmployee bool `json:"required_for_employee,omitempty"`

	// translation term
	TranslationTerm string `json:"translation_term,omitempty"`

	// type
	// Enum: [Text Boolean Numeric Dropdown Date Phone Options Custom Image]
	Type string `json:"type,omitempty"`

	// unique enforce
	UniqueEnforce bool `json:"unique_enforce,omitempty"`

	// unique value item mode
	// Enum: [None Active ActiveAndDeactivated]
	UniqueValueItemMode string `json:"unique_value_item_mode,omitempty"`

	// unique value mode
	// Enum: [None Block Warn]
	UniqueValueMode string `json:"unique_value_mode,omitempty"`

	// visible for employee
	VisibleForEmployee bool `json:"visible_for_employee,omitempty"`

	// visible when creating employee
	VisibleWhenCreatingEmployee bool `json:"visible_when_creating_employee,omitempty"`

	// visible when editing employee
	VisibleWhenEditingEmployee bool `json:"visible_when_editing_employee,omitempty"`
}

// Validate validates this form definition field input model
func (m *FormDefinitionFieldInputModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchived(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniqueValueItemMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniqueValueMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FormDefinitionFieldInputModel) validateArchived(formats strfmt.Registry) error {

	if swag.IsZero(m.Archived) { // not required
		return nil
	}

	if m.Archived != nil {
		if err := m.Archived.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archived")
			}
			return err
		}
	}

	return nil
}

var formDefinitionFieldInputModelTypeLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SystemField","StandardField","CustomField"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		formDefinitionFieldInputModelTypeLevelPropEnum = append(formDefinitionFieldInputModelTypeLevelPropEnum, v)
	}
}

const (

	// FormDefinitionFieldInputModelLevelSystemField captures enum value "SystemField"
	FormDefinitionFieldInputModelLevelSystemField string = "SystemField"

	// FormDefinitionFieldInputModelLevelStandardField captures enum value "StandardField"
	FormDefinitionFieldInputModelLevelStandardField string = "StandardField"

	// FormDefinitionFieldInputModelLevelCustomField captures enum value "CustomField"
	FormDefinitionFieldInputModelLevelCustomField string = "CustomField"
)

// prop value enum
func (m *FormDefinitionFieldInputModel) validateLevelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, formDefinitionFieldInputModelTypeLevelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FormDefinitionFieldInputModel) validateLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.Level) { // not required
		return nil
	}

	// value enum
	if err := m.validateLevelEnum("level", "body", m.Level); err != nil {
		return err
	}

	return nil
}

var formDefinitionFieldInputModelTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Text","Boolean","Numeric","Dropdown","Date","Phone","Options","Custom","Image"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		formDefinitionFieldInputModelTypeTypePropEnum = append(formDefinitionFieldInputModelTypeTypePropEnum, v)
	}
}

const (

	// FormDefinitionFieldInputModelTypeText captures enum value "Text"
	FormDefinitionFieldInputModelTypeText string = "Text"

	// FormDefinitionFieldInputModelTypeBoolean captures enum value "Boolean"
	FormDefinitionFieldInputModelTypeBoolean string = "Boolean"

	// FormDefinitionFieldInputModelTypeNumeric captures enum value "Numeric"
	FormDefinitionFieldInputModelTypeNumeric string = "Numeric"

	// FormDefinitionFieldInputModelTypeDropdown captures enum value "Dropdown"
	FormDefinitionFieldInputModelTypeDropdown string = "Dropdown"

	// FormDefinitionFieldInputModelTypeDate captures enum value "Date"
	FormDefinitionFieldInputModelTypeDate string = "Date"

	// FormDefinitionFieldInputModelTypePhone captures enum value "Phone"
	FormDefinitionFieldInputModelTypePhone string = "Phone"

	// FormDefinitionFieldInputModelTypeOptions captures enum value "Options"
	FormDefinitionFieldInputModelTypeOptions string = "Options"

	// FormDefinitionFieldInputModelTypeCustom captures enum value "Custom"
	FormDefinitionFieldInputModelTypeCustom string = "Custom"

	// FormDefinitionFieldInputModelTypeImage captures enum value "Image"
	FormDefinitionFieldInputModelTypeImage string = "Image"
)

// prop value enum
func (m *FormDefinitionFieldInputModel) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, formDefinitionFieldInputModelTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FormDefinitionFieldInputModel) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

var formDefinitionFieldInputModelTypeUniqueValueItemModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Active","ActiveAndDeactivated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		formDefinitionFieldInputModelTypeUniqueValueItemModePropEnum = append(formDefinitionFieldInputModelTypeUniqueValueItemModePropEnum, v)
	}
}

const (

	// FormDefinitionFieldInputModelUniqueValueItemModeNone captures enum value "None"
	FormDefinitionFieldInputModelUniqueValueItemModeNone string = "None"

	// FormDefinitionFieldInputModelUniqueValueItemModeActive captures enum value "Active"
	FormDefinitionFieldInputModelUniqueValueItemModeActive string = "Active"

	// FormDefinitionFieldInputModelUniqueValueItemModeActiveAndDeactivated captures enum value "ActiveAndDeactivated"
	FormDefinitionFieldInputModelUniqueValueItemModeActiveAndDeactivated string = "ActiveAndDeactivated"
)

// prop value enum
func (m *FormDefinitionFieldInputModel) validateUniqueValueItemModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, formDefinitionFieldInputModelTypeUniqueValueItemModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FormDefinitionFieldInputModel) validateUniqueValueItemMode(formats strfmt.Registry) error {

	if swag.IsZero(m.UniqueValueItemMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateUniqueValueItemModeEnum("unique_value_item_mode", "body", m.UniqueValueItemMode); err != nil {
		return err
	}

	return nil
}

var formDefinitionFieldInputModelTypeUniqueValueModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Block","Warn"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		formDefinitionFieldInputModelTypeUniqueValueModePropEnum = append(formDefinitionFieldInputModelTypeUniqueValueModePropEnum, v)
	}
}

const (

	// FormDefinitionFieldInputModelUniqueValueModeNone captures enum value "None"
	FormDefinitionFieldInputModelUniqueValueModeNone string = "None"

	// FormDefinitionFieldInputModelUniqueValueModeBlock captures enum value "Block"
	FormDefinitionFieldInputModelUniqueValueModeBlock string = "Block"

	// FormDefinitionFieldInputModelUniqueValueModeWarn captures enum value "Warn"
	FormDefinitionFieldInputModelUniqueValueModeWarn string = "Warn"
)

// prop value enum
func (m *FormDefinitionFieldInputModel) validateUniqueValueModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, formDefinitionFieldInputModelTypeUniqueValueModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FormDefinitionFieldInputModel) validateUniqueValueMode(formats strfmt.Registry) error {

	if swag.IsZero(m.UniqueValueMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateUniqueValueModeEnum("unique_value_mode", "body", m.UniqueValueMode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FormDefinitionFieldInputModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FormDefinitionFieldInputModel) UnmarshalBinary(b []byte) error {
	var res FormDefinitionFieldInputModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
