// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FormDefinitionFieldResult form definition field result
// swagger:model FormDefinitionFieldResult
type FormDefinitionFieldResult struct {

	// archived
	Archived *Archived `json:"archived,omitempty"`

	// default value
	DefaultValue string `json:"default_value,omitempty"`

	// employee can edit
	EmployeeCanEdit bool `json:"employee_can_edit,omitempty"`

	// input type
	InputType string `json:"input_type,omitempty"`

	// is employee can edit r o
	IsEmployeeCanEditRO bool `json:"is_employee_can_edit_r_o,omitempty"`

	// is field deletable
	IsFieldDeletable bool `json:"is_field_deletable,omitempty"`

	// is in use
	IsInUse bool `json:"is_in_use,omitempty"`

	// is manager can create r o
	IsManagerCanCreateRO bool `json:"is_manager_can_create_r_o,omitempty"`

	// is manager can edit r o
	IsManagerCanEditRO bool `json:"is_manager_can_edit_r_o,omitempty"`

	// is required create for manager r o
	IsRequiredCreateForManagerRO bool `json:"is_required_create_for_manager_r_o,omitempty"`

	// is required edit for manager r o
	IsRequiredEditForManagerRO bool `json:"is_required_edit_for_manager_r_o,omitempty"`

	// is required for employee r o
	IsRequiredForEmployeeRO bool `json:"is_required_for_employee_r_o,omitempty"`

	// is unique
	IsUnique bool `json:"is_unique,omitempty"`

	// is visible for employee r o
	IsVisibleForEmployeeRO bool `json:"is_visible_for_employee_r_o,omitempty"`

	// is visible when creating employee r o
	IsVisibleWhenCreatingEmployeeRO bool `json:"is_visible_when_creating_employee_r_o,omitempty"`

	// is visible when editing employee r o
	IsVisibleWhenEditingEmployeeRO bool `json:"is_visible_when_editing_employee_r_o,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// level
	// Enum: [SystemField StandardField CustomField]
	Level string `json:"level,omitempty"`

	// manager can create
	ManagerCanCreate bool `json:"manager_can_create,omitempty"`

	// manager can edit
	ManagerCanEdit bool `json:"manager_can_edit,omitempty"`

	// options
	Options []string `json:"options"`

	// order
	Order int32 `json:"order,omitempty"`

	// property name
	PropertyName string `json:"property_name,omitempty"`

	// required create for manager
	RequiredCreateForManager bool `json:"required_create_for_manager,omitempty"`

	// required edit for manager
	RequiredEditForManager bool `json:"required_edit_for_manager,omitempty"`

	// required for employee
	RequiredForEmployee bool `json:"required_for_employee,omitempty"`

	// translation term
	TranslationTerm string `json:"translation_term,omitempty"`

	// type
	// Enum: [Text Boolean Numeric Dropdown Date Phone Options Custom Image]
	Type string `json:"type,omitempty"`

	// unique enforce
	UniqueEnforce bool `json:"unique_enforce,omitempty"`

	// visible for employee
	VisibleForEmployee bool `json:"visible_for_employee,omitempty"`

	// visible when creating employee
	VisibleWhenCreatingEmployee bool `json:"visible_when_creating_employee,omitempty"`

	// visible when editing employee
	VisibleWhenEditingEmployee bool `json:"visible_when_editing_employee,omitempty"`
}

// Validate validates this form definition field result
func (m *FormDefinitionFieldResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchived(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FormDefinitionFieldResult) validateArchived(formats strfmt.Registry) error {

	if swag.IsZero(m.Archived) { // not required
		return nil
	}

	if m.Archived != nil {
		if err := m.Archived.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archived")
			}
			return err
		}
	}

	return nil
}

var formDefinitionFieldResultTypeLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SystemField","StandardField","CustomField"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		formDefinitionFieldResultTypeLevelPropEnum = append(formDefinitionFieldResultTypeLevelPropEnum, v)
	}
}

const (

	// FormDefinitionFieldResultLevelSystemField captures enum value "SystemField"
	FormDefinitionFieldResultLevelSystemField string = "SystemField"

	// FormDefinitionFieldResultLevelStandardField captures enum value "StandardField"
	FormDefinitionFieldResultLevelStandardField string = "StandardField"

	// FormDefinitionFieldResultLevelCustomField captures enum value "CustomField"
	FormDefinitionFieldResultLevelCustomField string = "CustomField"
)

// prop value enum
func (m *FormDefinitionFieldResult) validateLevelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, formDefinitionFieldResultTypeLevelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FormDefinitionFieldResult) validateLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.Level) { // not required
		return nil
	}

	// value enum
	if err := m.validateLevelEnum("level", "body", m.Level); err != nil {
		return err
	}

	return nil
}

var formDefinitionFieldResultTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Text","Boolean","Numeric","Dropdown","Date","Phone","Options","Custom","Image"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		formDefinitionFieldResultTypeTypePropEnum = append(formDefinitionFieldResultTypeTypePropEnum, v)
	}
}

const (

	// FormDefinitionFieldResultTypeText captures enum value "Text"
	FormDefinitionFieldResultTypeText string = "Text"

	// FormDefinitionFieldResultTypeBoolean captures enum value "Boolean"
	FormDefinitionFieldResultTypeBoolean string = "Boolean"

	// FormDefinitionFieldResultTypeNumeric captures enum value "Numeric"
	FormDefinitionFieldResultTypeNumeric string = "Numeric"

	// FormDefinitionFieldResultTypeDropdown captures enum value "Dropdown"
	FormDefinitionFieldResultTypeDropdown string = "Dropdown"

	// FormDefinitionFieldResultTypeDate captures enum value "Date"
	FormDefinitionFieldResultTypeDate string = "Date"

	// FormDefinitionFieldResultTypePhone captures enum value "Phone"
	FormDefinitionFieldResultTypePhone string = "Phone"

	// FormDefinitionFieldResultTypeOptions captures enum value "Options"
	FormDefinitionFieldResultTypeOptions string = "Options"

	// FormDefinitionFieldResultTypeCustom captures enum value "Custom"
	FormDefinitionFieldResultTypeCustom string = "Custom"

	// FormDefinitionFieldResultTypeImage captures enum value "Image"
	FormDefinitionFieldResultTypeImage string = "Image"
)

// prop value enum
func (m *FormDefinitionFieldResult) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, formDefinitionFieldResultTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FormDefinitionFieldResult) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FormDefinitionFieldResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FormDefinitionFieldResult) UnmarshalBinary(b []byte) error {
	var res FormDefinitionFieldResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
