// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PayRate pay rate
// swagger:model PayRate
type PayRate struct {

	// created at
	// Read Only: true
	CreatedAt string `json:"created_at,omitempty"`

	// created by
	// Read Only: true
	CreatedBy int64 `json:"created_by,omitempty"`

	// date created
	// Read Only: true
	// Format: date-time
	DateCreated strfmt.DateTime `json:"date_created,omitempty"`

	// date modified
	// Read Only: true
	// Format: date-time
	DateModified strfmt.DateTime `json:"date_modified,omitempty"`

	// employee
	// Read Only: true
	Employee *Employee `json:"employee,omitempty"`

	// employee group
	// Read Only: true
	EmployeeGroup *EmployeeGroup `json:"employee_group,omitempty"`

	// employee group id
	// Read Only: true
	EmployeeGroupID int64 `json:"employee_group_id,omitempty"`

	// employee id
	// Read Only: true
	EmployeeID int64 `json:"employee_id,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// is deleted
	// Read Only: true
	IsDeleted *bool `json:"is_deleted,omitempty"`

	// last modified
	// Read Only: true
	LastModified string `json:"last_modified,omitempty"`

	// modified by
	// Read Only: true
	ModifiedBy int64 `json:"modified_by,omitempty"`

	// raised events
	// Read Only: true
	RaisedEvents []*IdomainEvent `json:"raised_events"`

	// salary code
	SalaryCode string `json:"salary_code,omitempty"`

	// valid from
	// Read Only: true
	// Format: date-time
	ValidFrom strfmt.DateTime `json:"valid_from,omitempty"`

	// valid to
	// Read Only: true
	// Format: date-time
	ValidTo strfmt.DateTime `json:"valid_to,omitempty"`

	// value
	// Read Only: true
	Value float64 `json:"value,omitempty"`
}

// Validate validates this pay rate
func (m *PayRate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmployee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmployeeGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRaisedEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PayRate) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("date_created", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PayRate) validateDateModified(formats strfmt.Registry) error {

	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("date_modified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PayRate) validateEmployee(formats strfmt.Registry) error {

	if swag.IsZero(m.Employee) { // not required
		return nil
	}

	if m.Employee != nil {
		if err := m.Employee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("employee")
			}
			return err
		}
	}

	return nil
}

func (m *PayRate) validateEmployeeGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.EmployeeGroup) { // not required
		return nil
	}

	if m.EmployeeGroup != nil {
		if err := m.EmployeeGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("employee_group")
			}
			return err
		}
	}

	return nil
}

func (m *PayRate) validateRaisedEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.RaisedEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.RaisedEvents); i++ {
		if swag.IsZero(m.RaisedEvents[i]) { // not required
			continue
		}

		if m.RaisedEvents[i] != nil {
			if err := m.RaisedEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("raised_events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PayRate) validateValidFrom(formats strfmt.Registry) error {

	if swag.IsZero(m.ValidFrom) { // not required
		return nil
	}

	if err := validate.FormatOf("valid_from", "body", "date-time", m.ValidFrom.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PayRate) validateValidTo(formats strfmt.Registry) error {

	if swag.IsZero(m.ValidTo) { // not required
		return nil
	}

	if err := validate.FormatOf("valid_to", "body", "date-time", m.ValidTo.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PayRate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PayRate) UnmarshalBinary(b []byte) error {
	var res PayRate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
