// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User user
// swagger:model User
type User struct {

	// id
	ID int64 `json:"id,omitempty"`

	// last activity date
	// Format: date-time
	LastActivityDate strfmt.DateTime `json:"last_activity_date,omitempty"`

	// lowered user name
	LoweredUserName string `json:"lowered_user_name,omitempty"`

	// user information
	UserInformation *UserInformation `json:"user_information,omitempty"`

	// user name
	UserName string `json:"user_name,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastActivityDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateLastActivityDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastActivityDate) { // not required
		return nil
	}

	if err := validate.FormatOf("last_activity_date", "body", "date-time", m.LastActivityDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateUserInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.UserInformation) { // not required
		return nil
	}

	if m.UserInformation != nil {
		if err := m.UserInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_information")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
