// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserInformation user information
// swagger:model UserInformation
type UserInformation struct {

	// comment
	Comment string `json:"comment,omitempty"`

	// create date
	// Format: date-time
	CreateDate strfmt.DateTime `json:"create_date,omitempty"`

	// failed password answer attempt count
	FailedPasswordAnswerAttemptCount int32 `json:"failed_password_answer_attempt_count,omitempty"`

	// failed password answer attempt window start
	// Format: date-time
	FailedPasswordAnswerAttemptWindowStart strfmt.DateTime `json:"failed_password_answer_attempt_window_start,omitempty"`

	// failed password attempt count
	FailedPasswordAttemptCount int32 `json:"failed_password_attempt_count,omitempty"`

	// failed password attempt window start
	// Format: date-time
	FailedPasswordAttemptWindowStart strfmt.DateTime `json:"failed_password_attempt_window_start,omitempty"`

	// is approved
	IsApproved bool `json:"is_approved,omitempty"`

	// is locked out
	IsLockedOut bool `json:"is_locked_out,omitempty"`

	// last lockout date
	// Format: date-time
	LastLockoutDate strfmt.DateTime `json:"last_lockout_date,omitempty"`

	// last login date
	// Format: date-time
	LastLoginDate strfmt.DateTime `json:"last_login_date,omitempty"`

	// last password changed date
	// Format: date-time
	LastPasswordChangedDate strfmt.DateTime `json:"last_password_changed_date,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// password answer
	PasswordAnswer string `json:"password_answer,omitempty"`

	// password format
	PasswordFormat int32 `json:"password_format,omitempty"`

	// password question
	PasswordQuestion string `json:"password_question,omitempty"`

	// password salt
	PasswordSalt string `json:"password_salt,omitempty"`

	// user
	User *User `json:"user,omitempty"`

	// user id
	UserID int64 `json:"user_id,omitempty"`
}

// Validate validates this user information
func (m *UserInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedPasswordAnswerAttemptWindowStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedPasswordAttemptWindowStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastLockoutDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastLoginDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastPasswordChangedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserInformation) validateCreateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreateDate) { // not required
		return nil
	}

	if err := validate.FormatOf("create_date", "body", "date-time", m.CreateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserInformation) validateFailedPasswordAnswerAttemptWindowStart(formats strfmt.Registry) error {

	if swag.IsZero(m.FailedPasswordAnswerAttemptWindowStart) { // not required
		return nil
	}

	if err := validate.FormatOf("failed_password_answer_attempt_window_start", "body", "date-time", m.FailedPasswordAnswerAttemptWindowStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserInformation) validateFailedPasswordAttemptWindowStart(formats strfmt.Registry) error {

	if swag.IsZero(m.FailedPasswordAttemptWindowStart) { // not required
		return nil
	}

	if err := validate.FormatOf("failed_password_attempt_window_start", "body", "date-time", m.FailedPasswordAttemptWindowStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserInformation) validateLastLockoutDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastLockoutDate) { // not required
		return nil
	}

	if err := validate.FormatOf("last_lockout_date", "body", "date-time", m.LastLockoutDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserInformation) validateLastLoginDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastLoginDate) { // not required
		return nil
	}

	if err := validate.FormatOf("last_login_date", "body", "date-time", m.LastLoginDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserInformation) validateLastPasswordChangedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastPasswordChangedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("last_password_changed_date", "body", "date-time", m.LastPasswordChangedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserInformation) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserInformation) UnmarshalBinary(b []byte) error {
	var res UserInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
