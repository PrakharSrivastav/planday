// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserProfileDetailsViewModel user profile details view model
// swagger:model UserProfileDetailsViewModel
type UserProfileDetailsViewModel struct {

	// bank account
	BankAccount string `json:"bank_account,omitempty"`

	// bank reg number
	BankRegNumber string `json:"bank_reg_number,omitempty"`

	// birth date
	BirthDate string `json:"birth_date,omitempty"`

	// birthday
	// Read Only: true
	// Format: date-time
	Birthday strfmt.DateTime `json:"birthday,omitempty"`

	// cell phone
	CellPhone string `json:"cell_phone,omitempty"`

	// cell phone country id
	CellPhoneCountryID int64 `json:"cell_phone_country_id,omitempty"`

	// cell phone prefix
	CellPhonePrefix string `json:"cell_phone_prefix,omitempty"`

	// city
	City string `json:"city,omitempty"`

	// country id
	CountryID int64 `json:"country_id,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// first name
	FirstName string `json:"first_name,omitempty"`

	// gender
	// Enum: [Male Female]
	Gender string `json:"gender,omitempty"`

	// has avatar
	HasAvatar bool `json:"has_avatar,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// initials
	Initials string `json:"initials,omitempty"`

	// is public
	IsPublic bool `json:"is_public,omitempty"`

	// job title
	JobTitle string `json:"job_title,omitempty"`

	// last name
	LastName string `json:"last_name,omitempty"`

	// nick name
	NickName string `json:"nick_name,omitempty"`

	// phone
	Phone string `json:"phone,omitempty"`

	// phone country id
	PhoneCountryID int64 `json:"phone_country_id,omitempty"`

	// phone prefix
	PhonePrefix string `json:"phone_prefix,omitempty"`

	// ssn
	Ssn string `json:"ssn,omitempty"`

	// street
	// Read Only: true
	Street string `json:"street,omitempty"`

	// street1
	Street1 string `json:"street1,omitempty"`

	// street2
	Street2 string `json:"street2,omitempty"`

	// subdivision id
	SubdivisionID int64 `json:"subdivision_id,omitempty"`

	// zip
	Zip string `json:"zip,omitempty"`

	// user profile details view model
	UserProfileDetailsViewModel map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *UserProfileDetailsViewModel) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// bank account
		BankAccount string `json:"bank_account,omitempty"`

		// bank reg number
		BankRegNumber string `json:"bank_reg_number,omitempty"`

		// birth date
		BirthDate string `json:"birth_date,omitempty"`

		// birthday
		// Read Only: true
		// Format: date-time
		Birthday strfmt.DateTime `json:"birthday,omitempty"`

		// cell phone
		CellPhone string `json:"cell_phone,omitempty"`

		// cell phone country id
		CellPhoneCountryID int64 `json:"cell_phone_country_id,omitempty"`

		// cell phone prefix
		CellPhonePrefix string `json:"cell_phone_prefix,omitempty"`

		// city
		City string `json:"city,omitempty"`

		// country id
		CountryID int64 `json:"country_id,omitempty"`

		// email
		Email string `json:"email,omitempty"`

		// first name
		FirstName string `json:"first_name,omitempty"`

		// gender
		// Enum: [Male Female]
		Gender string `json:"gender,omitempty"`

		// has avatar
		HasAvatar bool `json:"has_avatar,omitempty"`

		// id
		ID int64 `json:"id,omitempty"`

		// initials
		Initials string `json:"initials,omitempty"`

		// is public
		IsPublic bool `json:"is_public,omitempty"`

		// job title
		JobTitle string `json:"job_title,omitempty"`

		// last name
		LastName string `json:"last_name,omitempty"`

		// nick name
		NickName string `json:"nick_name,omitempty"`

		// phone
		Phone string `json:"phone,omitempty"`

		// phone country id
		PhoneCountryID int64 `json:"phone_country_id,omitempty"`

		// phone prefix
		PhonePrefix string `json:"phone_prefix,omitempty"`

		// ssn
		Ssn string `json:"ssn,omitempty"`

		// street
		// Read Only: true
		Street string `json:"street,omitempty"`

		// street1
		Street1 string `json:"street1,omitempty"`

		// street2
		Street2 string `json:"street2,omitempty"`

		// subdivision id
		SubdivisionID int64 `json:"subdivision_id,omitempty"`

		// zip
		Zip string `json:"zip,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv UserProfileDetailsViewModel

	rcv.BankAccount = stage1.BankAccount

	rcv.BankRegNumber = stage1.BankRegNumber

	rcv.BirthDate = stage1.BirthDate

	rcv.Birthday = stage1.Birthday

	rcv.CellPhone = stage1.CellPhone

	rcv.CellPhoneCountryID = stage1.CellPhoneCountryID

	rcv.CellPhonePrefix = stage1.CellPhonePrefix

	rcv.City = stage1.City

	rcv.CountryID = stage1.CountryID

	rcv.Email = stage1.Email

	rcv.FirstName = stage1.FirstName

	rcv.Gender = stage1.Gender

	rcv.HasAvatar = stage1.HasAvatar

	rcv.ID = stage1.ID

	rcv.Initials = stage1.Initials

	rcv.IsPublic = stage1.IsPublic

	rcv.JobTitle = stage1.JobTitle

	rcv.LastName = stage1.LastName

	rcv.NickName = stage1.NickName

	rcv.Phone = stage1.Phone

	rcv.PhoneCountryID = stage1.PhoneCountryID

	rcv.PhonePrefix = stage1.PhonePrefix

	rcv.Ssn = stage1.Ssn

	rcv.Street = stage1.Street

	rcv.Street1 = stage1.Street1

	rcv.Street2 = stage1.Street2

	rcv.SubdivisionID = stage1.SubdivisionID

	rcv.Zip = stage1.Zip

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "bank_account")

	delete(stage2, "bank_reg_number")

	delete(stage2, "birth_date")

	delete(stage2, "birthday")

	delete(stage2, "cell_phone")

	delete(stage2, "cell_phone_country_id")

	delete(stage2, "cell_phone_prefix")

	delete(stage2, "city")

	delete(stage2, "country_id")

	delete(stage2, "email")

	delete(stage2, "first_name")

	delete(stage2, "gender")

	delete(stage2, "has_avatar")

	delete(stage2, "id")

	delete(stage2, "initials")

	delete(stage2, "is_public")

	delete(stage2, "job_title")

	delete(stage2, "last_name")

	delete(stage2, "nick_name")

	delete(stage2, "phone")

	delete(stage2, "phone_country_id")

	delete(stage2, "phone_prefix")

	delete(stage2, "ssn")

	delete(stage2, "street")

	delete(stage2, "street1")

	delete(stage2, "street2")

	delete(stage2, "subdivision_id")

	delete(stage2, "zip")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.UserProfileDetailsViewModel = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m UserProfileDetailsViewModel) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// bank account
		BankAccount string `json:"bank_account,omitempty"`

		// bank reg number
		BankRegNumber string `json:"bank_reg_number,omitempty"`

		// birth date
		BirthDate string `json:"birth_date,omitempty"`

		// birthday
		// Read Only: true
		// Format: date-time
		Birthday strfmt.DateTime `json:"birthday,omitempty"`

		// cell phone
		CellPhone string `json:"cell_phone,omitempty"`

		// cell phone country id
		CellPhoneCountryID int64 `json:"cell_phone_country_id,omitempty"`

		// cell phone prefix
		CellPhonePrefix string `json:"cell_phone_prefix,omitempty"`

		// city
		City string `json:"city,omitempty"`

		// country id
		CountryID int64 `json:"country_id,omitempty"`

		// email
		Email string `json:"email,omitempty"`

		// first name
		FirstName string `json:"first_name,omitempty"`

		// gender
		// Enum: [Male Female]
		Gender string `json:"gender,omitempty"`

		// has avatar
		HasAvatar bool `json:"has_avatar,omitempty"`

		// id
		ID int64 `json:"id,omitempty"`

		// initials
		Initials string `json:"initials,omitempty"`

		// is public
		IsPublic bool `json:"is_public,omitempty"`

		// job title
		JobTitle string `json:"job_title,omitempty"`

		// last name
		LastName string `json:"last_name,omitempty"`

		// nick name
		NickName string `json:"nick_name,omitempty"`

		// phone
		Phone string `json:"phone,omitempty"`

		// phone country id
		PhoneCountryID int64 `json:"phone_country_id,omitempty"`

		// phone prefix
		PhonePrefix string `json:"phone_prefix,omitempty"`

		// ssn
		Ssn string `json:"ssn,omitempty"`

		// street
		// Read Only: true
		Street string `json:"street,omitempty"`

		// street1
		Street1 string `json:"street1,omitempty"`

		// street2
		Street2 string `json:"street2,omitempty"`

		// subdivision id
		SubdivisionID int64 `json:"subdivision_id,omitempty"`

		// zip
		Zip string `json:"zip,omitempty"`
	}

	stage1.BankAccount = m.BankAccount

	stage1.BankRegNumber = m.BankRegNumber

	stage1.BirthDate = m.BirthDate

	stage1.Birthday = m.Birthday

	stage1.CellPhone = m.CellPhone

	stage1.CellPhoneCountryID = m.CellPhoneCountryID

	stage1.CellPhonePrefix = m.CellPhonePrefix

	stage1.City = m.City

	stage1.CountryID = m.CountryID

	stage1.Email = m.Email

	stage1.FirstName = m.FirstName

	stage1.Gender = m.Gender

	stage1.HasAvatar = m.HasAvatar

	stage1.ID = m.ID

	stage1.Initials = m.Initials

	stage1.IsPublic = m.IsPublic

	stage1.JobTitle = m.JobTitle

	stage1.LastName = m.LastName

	stage1.NickName = m.NickName

	stage1.Phone = m.Phone

	stage1.PhoneCountryID = m.PhoneCountryID

	stage1.PhonePrefix = m.PhonePrefix

	stage1.Ssn = m.Ssn

	stage1.Street = m.Street

	stage1.Street1 = m.Street1

	stage1.Street2 = m.Street2

	stage1.SubdivisionID = m.SubdivisionID

	stage1.Zip = m.Zip

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.UserProfileDetailsViewModel) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.UserProfileDetailsViewModel)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this user profile details view model
func (m *UserProfileDetailsViewModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBirthday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGender(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserProfileDetailsViewModel) validateBirthday(formats strfmt.Registry) error {

	if swag.IsZero(m.Birthday) { // not required
		return nil
	}

	if err := validate.FormatOf("birthday", "body", "date-time", m.Birthday.String(), formats); err != nil {
		return err
	}

	return nil
}

var userProfileDetailsViewModelTypeGenderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Male","Female"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userProfileDetailsViewModelTypeGenderPropEnum = append(userProfileDetailsViewModelTypeGenderPropEnum, v)
	}
}

const (

	// UserProfileDetailsViewModelGenderMale captures enum value "Male"
	UserProfileDetailsViewModelGenderMale string = "Male"

	// UserProfileDetailsViewModelGenderFemale captures enum value "Female"
	UserProfileDetailsViewModelGenderFemale string = "Female"
)

// prop value enum
func (m *UserProfileDetailsViewModel) validateGenderEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userProfileDetailsViewModelTypeGenderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UserProfileDetailsViewModel) validateGender(formats strfmt.Registry) error {

	if swag.IsZero(m.Gender) { // not required
		return nil
	}

	// value enum
	if err := m.validateGenderEnum("gender", "body", m.Gender); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserProfileDetailsViewModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserProfileDetailsViewModel) UnmarshalBinary(b []byte) error {
	var res UserProfileDetailsViewModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
